{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../node_modules/.pnpm/ogl@0.0.116/node_modules/ogl/src/math/functions/Vec3Func.js", "../node_modules/.pnpm/ogl@0.0.116/node_modules/ogl/src/math/Vec3.js", "../node_modules/.pnpm/ogl@0.0.116/node_modules/ogl/src/core/Geometry.js", "../node_modules/.pnpm/ogl@0.0.116/node_modules/ogl/src/core/Program.js", "../node_modules/.pnpm/ogl@0.0.116/node_modules/ogl/src/core/Renderer.js", "../node_modules/.pnpm/ogl@0.0.116/node_modules/ogl/src/math/functions/Vec4Func.js", "../node_modules/.pnpm/ogl@0.0.116/node_modules/ogl/src/math/functions/QuatFunc.js", "../node_modules/.pnpm/ogl@0.0.116/node_modules/ogl/src/math/Quat.js", "../node_modules/.pnpm/ogl@0.0.116/node_modules/ogl/src/math/functions/Mat4Func.js", "../node_modules/.pnpm/ogl@0.0.116/node_modules/ogl/src/math/Mat4.js", "../node_modules/.pnpm/ogl@0.0.116/node_modules/ogl/src/math/functions/EulerFunc.js", "../node_modules/.pnpm/ogl@0.0.116/node_modules/ogl/src/math/Euler.js", "../node_modules/.pnpm/ogl@0.0.116/node_modules/ogl/src/core/Transform.js", "../node_modules/.pnpm/ogl@0.0.116/node_modules/ogl/src/core/Camera.js", "../node_modules/.pnpm/ogl@0.0.116/node_modules/ogl/src/math/functions/Mat3Func.js", "../node_modules/.pnpm/ogl@0.0.116/node_modules/ogl/src/math/Mat3.js", "../node_modules/.pnpm/ogl@0.0.116/node_modules/ogl/src/core/Mesh.js", "../node_modules/.pnpm/ogl@0.0.116/node_modules/ogl/src/core/Texture.js", "../node_modules/.pnpm/ogl@0.0.116/node_modules/ogl/src/math/functions/Vec2Func.js", "../node_modules/.pnpm/ogl@0.0.116/node_modules/ogl/src/math/Vec2.js", "../node_modules/.pnpm/ogl@0.0.116/node_modules/ogl/src/math/Vec4.js", "../node_modules/.pnpm/ogl@0.0.116/node_modules/ogl/src/extras/Orbit.js", "../node_modules/.pnpm/ogl@0.0.116/node_modules/ogl/src/extras/NormalProgram.js", "../node_modules/.pnpm/ogl@0.0.116/node_modules/ogl/src/extras/GLTFAnimation.js", "../node_modules/.pnpm/ogl@0.0.116/node_modules/ogl/src/extras/GLTFSkin.js", "../node_modules/.pnpm/ogl@0.0.116/node_modules/ogl/src/extras/InstancedMesh.js", "../node_modules/.pnpm/ogl@0.0.116/node_modules/ogl/src/extras/GLTFLoader.js", "../src/gl/_camera.js", "../src/gl/mat/rock/index.js", "../src/gl/rock.js", "../src/gl/mat/screen/index.js", "../src/gl/screen.js", "../src/gl/mat/_model/index.js", "../src/gl/ipad.js", "../src/gl/_scene.js", "../src/gl/asset/index.js", "../src/gl/util/texture-loader.js", "../src/gl/util/model-loader.js", "../src/gl/util/loader.js", "../src/gl/gl.js", "../src/app.js"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "const EPSILON = 0.000001;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n    let x = b[0] - a[0];\n    let y = b[1] - a[1];\n    let z = b[2] - a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n    let x = b[0] - a[0];\n    let y = b[1] - a[1];\n    let z = b[2] - a[2];\n    return x * x + y * y + z * z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return x * x + y * y + z * z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    out[2] = 1.0 / a[2];\n    return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let len = x * x + y * y + z * z;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n    let ax = a[0],\n        ay = a[1],\n        az = a[2];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n}\n\n/**\n * Same as above but doesn't apply translation.\n * Useful for rays.\n */\nexport function scaleRotateMat4(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z) / w;\n    return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let qx = q[0],\n        qy = q[1],\n        qz = q[2],\n        qw = q[3];\n\n    let uvx = qy * z - qz * y;\n    let uvy = qz * x - qx * z;\n    let uvz = qx * y - qy * x;\n\n    let uuvx = qy * uvz - qz * uvy;\n    let uuvy = qz * uvx - qx * uvz;\n    let uuvz = qx * uvy - qy * uvx;\n\n    let w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2;\n\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport const angle = (function () {\n    const tempA = [0, 0, 0];\n    const tempB = [0, 0, 0];\n\n    return function (a, b) {\n        copy(tempA, a);\n        copy(tempB, b);\n\n        normalize(tempA, tempA);\n        normalize(tempB, tempB);\n\n        let cosine = dot(tempA, tempB);\n\n        if (cosine > 1.0) {\n            return 0;\n        } else if (cosine < -1.0) {\n            return Math.PI;\n        } else {\n            return Math.acos(cosine);\n        }\n    };\n})();\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n", "import * as Vec3Func from './functions/Vec3Func.js';\n\nexport class Vec3 extends Array {\n    constructor(x = 0, y = x, z = x) {\n        super(x, y, z);\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    set x(v) {\n        this[0] = v;\n    }\n\n    set y(v) {\n        this[1] = v;\n    }\n\n    set z(v) {\n        this[2] = v;\n    }\n\n    set(x, y = x, z = x) {\n        if (x.length) return this.copy(x);\n        Vec3Func.set(this, x, y, z);\n        return this;\n    }\n\n    copy(v) {\n        Vec3Func.copy(this, v);\n        return this;\n    }\n\n    add(va, vb) {\n        if (vb) Vec3Func.add(this, va, vb);\n        else Vec3Func.add(this, this, va);\n        return this;\n    }\n\n    sub(va, vb) {\n        if (vb) Vec3Func.subtract(this, va, vb);\n        else Vec3Func.subtract(this, this, va);\n        return this;\n    }\n\n    multiply(v) {\n        if (v.length) Vec3Func.multiply(this, this, v);\n        else Vec3Func.scale(this, this, v);\n        return this;\n    }\n\n    divide(v) {\n        if (v.length) Vec3Func.divide(this, this, v);\n        else Vec3Func.scale(this, this, 1 / v);\n        return this;\n    }\n\n    inverse(v = this) {\n        Vec3Func.inverse(this, v);\n        return this;\n    }\n\n    // Can't use 'length' as Array.prototype uses it\n    len() {\n        return Vec3Func.length(this);\n    }\n\n    distance(v) {\n        if (v) return Vec3Func.distance(this, v);\n        else return Vec3Func.length(this);\n    }\n\n    squaredLen() {\n        return Vec3Func.squaredLength(this);\n    }\n\n    squaredDistance(v) {\n        if (v) return Vec3Func.squaredDistance(this, v);\n        else return Vec3Func.squaredLength(this);\n    }\n\n    negate(v = this) {\n        Vec3Func.negate(this, v);\n        return this;\n    }\n\n    cross(va, vb) {\n        if (vb) Vec3Func.cross(this, va, vb);\n        else Vec3Func.cross(this, this, va);\n        return this;\n    }\n\n    scale(v) {\n        Vec3Func.scale(this, this, v);\n        return this;\n    }\n\n    normalize() {\n        Vec3Func.normalize(this, this);\n        return this;\n    }\n\n    dot(v) {\n        return Vec3Func.dot(this, v);\n    }\n\n    equals(v) {\n        return Vec3Func.exactEquals(this, v);\n    }\n\n    applyMatrix3(mat3) {\n        Vec3Func.transformMat3(this, this, mat3);\n        return this;\n    }\n\n    applyMatrix4(mat4) {\n        Vec3Func.transformMat4(this, this, mat4);\n        return this;\n    }\n\n    scaleRotateMatrix4(mat4) {\n        Vec3Func.scaleRotateMat4(this, this, mat4);\n        return this;\n    }\n\n    applyQuaternion(q) {\n        Vec3Func.transformQuat(this, this, q);\n        return this;\n    }\n\n    angle(v) {\n        return Vec3Func.angle(this, v);\n    }\n\n    lerp(v, t) {\n        Vec3Func.lerp(this, this, v, t);\n        return this;\n    }\n\n    clone() {\n        return new Vec3(this[0], this[1], this[2]);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        return a;\n    }\n\n    transformDirection(mat4) {\n        const x = this[0];\n        const y = this[1];\n        const z = this[2];\n\n        this[0] = mat4[0] * x + mat4[4] * y + mat4[8] * z;\n        this[1] = mat4[1] * x + mat4[5] * y + mat4[9] * z;\n        this[2] = mat4[2] * x + mat4[6] * y + mat4[10] * z;\n\n        return this.normalize();\n    }\n}\n", "// attribute params\n// {\n//     data - typed array eg UInt16Array for indices, Float32Array\n//     size - int default 1\n//     instanced - default null. Pass divisor amount\n//     type - gl enum default gl.UNSIGNED_SHORT for 'index', gl.FLOAT for others\n//     normalized - boolean default false\n\n//     buffer - gl buffer, if buffer exists, don't need to provide data - although needs position data for bounds calculation\n//     stride - default 0 - for when passing in buffer\n//     offset - default 0 - for when passing in buffer\n//     count - default null - for when passing in buffer\n//     min - array - for when passing in buffer\n//     max - array - for when passing in buffer\n// }\n\n// TODO: fit in transform feedback\n\nimport { Vec3 } from '../math/Vec3.js';\n\nconst tempVec3 = new Vec3();\n\nlet ID = 1;\nlet ATTR_ID = 1;\n\n// To stop inifinite warnings\nlet isBoundsWarned = false;\n\nexport class Geometry {\n    constructor(gl, attributes = {}) {\n        if (!gl.canvas) console.error('gl not passed as first argument to Geometry');\n        this.gl = gl;\n        this.attributes = attributes;\n        this.id = ID++;\n\n        // Store one VAO per program attribute locations order\n        this.VAOs = {};\n\n        this.drawRange = { start: 0, count: 0 };\n        this.instancedCount = 0;\n\n        // Unbind current VAO so that new buffers don't get added to active mesh\n        this.gl.renderer.bindVertexArray(null);\n        this.gl.renderer.currentGeometry = null;\n\n        // Alias for state store to avoid redundant calls for global state\n        this.glState = this.gl.renderer.state;\n\n        // create the buffers\n        for (let key in attributes) {\n            this.addAttribute(key, attributes[key]);\n        }\n    }\n\n    addAttribute(key, attr) {\n        this.attributes[key] = attr;\n\n        // Set options\n        attr.id = ATTR_ID++; // TODO: currently unused, remove?\n        attr.size = attr.size || 1;\n        attr.type =\n            attr.type ||\n            (attr.data.constructor === Float32Array\n                ? this.gl.FLOAT\n                : attr.data.constructor === Uint16Array\n                ? this.gl.UNSIGNED_SHORT\n                : this.gl.UNSIGNED_INT); // Uint32Array\n        attr.target = key === 'index' ? this.gl.ELEMENT_ARRAY_BUFFER : this.gl.ARRAY_BUFFER;\n        attr.normalized = attr.normalized || false;\n        attr.stride = attr.stride || 0;\n        attr.offset = attr.offset || 0;\n        attr.count = attr.count || (attr.stride ? attr.data.byteLength / attr.stride : attr.data.length / attr.size);\n        attr.divisor = attr.instanced || 0;\n        attr.needsUpdate = false;\n        attr.usage = attr.usage || this.gl.STATIC_DRAW;\n\n        if (!attr.buffer) {\n            // Push data to buffer\n            this.updateAttribute(attr);\n        }\n\n        // Update geometry counts. If indexed, ignore regular attributes\n        if (attr.divisor) {\n            this.isInstanced = true;\n            if (this.instancedCount && this.instancedCount !== attr.count * attr.divisor) {\n                console.warn('geometry has multiple instanced buffers of different length');\n                return (this.instancedCount = Math.min(this.instancedCount, attr.count * attr.divisor));\n            }\n            this.instancedCount = attr.count * attr.divisor;\n        } else if (key === 'index') {\n            this.drawRange.count = attr.count;\n        } else if (!this.attributes.index) {\n            this.drawRange.count = Math.max(this.drawRange.count, attr.count);\n        }\n    }\n\n    updateAttribute(attr) {\n        const isNewBuffer = !attr.buffer;\n        if (isNewBuffer) attr.buffer = this.gl.createBuffer();\n        if (this.glState.boundBuffer !== attr.buffer) {\n            this.gl.bindBuffer(attr.target, attr.buffer);\n            this.glState.boundBuffer = attr.buffer;\n        }\n        if (isNewBuffer) {\n            this.gl.bufferData(attr.target, attr.data, attr.usage);\n        } else {\n            this.gl.bufferSubData(attr.target, 0, attr.data);\n        }\n        attr.needsUpdate = false;\n    }\n\n    setIndex(value) {\n        this.addAttribute('index', value);\n    }\n\n    setDrawRange(start, count) {\n        this.drawRange.start = start;\n        this.drawRange.count = count;\n    }\n\n    setInstancedCount(value) {\n        this.instancedCount = value;\n    }\n\n    createVAO(program) {\n        this.VAOs[program.attributeOrder] = this.gl.renderer.createVertexArray();\n        this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\n        this.bindAttributes(program);\n    }\n\n    bindAttributes(program) {\n        // Link all attributes to program using gl.vertexAttribPointer\n        program.attributeLocations.forEach((location, { name, type }) => {\n            // If geometry missing a required shader attribute\n            if (!this.attributes[name]) {\n                console.warn(`active attribute ${name} not being supplied`);\n                return;\n            }\n\n            const attr = this.attributes[name];\n\n            this.gl.bindBuffer(attr.target, attr.buffer);\n            this.glState.boundBuffer = attr.buffer;\n\n            // For matrix attributes, buffer needs to be defined per column\n            let numLoc = 1;\n            if (type === 35674) numLoc = 2; // mat2\n            if (type === 35675) numLoc = 3; // mat3\n            if (type === 35676) numLoc = 4; // mat4\n\n            const size = attr.size / numLoc;\n            const stride = numLoc === 1 ? 0 : numLoc * numLoc * 4;\n            const offset = numLoc === 1 ? 0 : numLoc * 4;\n\n            for (let i = 0; i < numLoc; i++) {\n                this.gl.vertexAttribPointer(location + i, size, attr.type, attr.normalized, attr.stride + stride, attr.offset + i * offset);\n                this.gl.enableVertexAttribArray(location + i);\n\n                // For instanced attributes, divisor needs to be set.\n                // For firefox, need to set back to 0 if non-instanced drawn after instanced. Else won't render\n                this.gl.renderer.vertexAttribDivisor(location + i, attr.divisor);\n            }\n        });\n\n        // Bind indices if geometry indexed\n        if (this.attributes.index) this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.attributes.index.buffer);\n    }\n\n    draw({ program, mode = this.gl.TRIANGLES }) {\n        if (this.gl.renderer.currentGeometry !== `${this.id}_${program.attributeOrder}`) {\n            if (!this.VAOs[program.attributeOrder]) this.createVAO(program);\n            this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\n            this.gl.renderer.currentGeometry = `${this.id}_${program.attributeOrder}`;\n        }\n\n        // Check if any attributes need updating\n        program.attributeLocations.forEach((location, { name }) => {\n            const attr = this.attributes[name];\n            if (attr.needsUpdate) this.updateAttribute(attr);\n        });\n\n        // For drawElements, offset needs to be multiple of type size\n        let indexBytesPerElement = 2;\n        if (this.attributes.index?.type === this.gl.UNSIGNED_INT) indexBytesPerElement = 4;\n\n        if (this.isInstanced) {\n            if (this.attributes.index) {\n                this.gl.renderer.drawElementsInstanced(\n                    mode,\n                    this.drawRange.count,\n                    this.attributes.index.type,\n                    this.attributes.index.offset + this.drawRange.start * indexBytesPerElement,\n                    this.instancedCount\n                );\n            } else {\n                this.gl.renderer.drawArraysInstanced(mode, this.drawRange.start, this.drawRange.count, this.instancedCount);\n            }\n        } else {\n            if (this.attributes.index) {\n                this.gl.drawElements(\n                    mode,\n                    this.drawRange.count,\n                    this.attributes.index.type,\n                    this.attributes.index.offset + this.drawRange.start * indexBytesPerElement\n                );\n            } else {\n                this.gl.drawArrays(mode, this.drawRange.start, this.drawRange.count);\n            }\n        }\n    }\n\n    getPosition() {\n        // Use position buffer, or min/max if available\n        const attr = this.attributes.position;\n        // if (attr.min) return [...attr.min, ...attr.max];\n        if (attr.data) return attr;\n        if (isBoundsWarned) return;\n        console.warn('No position buffer data found to compute bounds');\n        return (isBoundsWarned = true);\n    }\n\n    computeBoundingBox(attr) {\n        if (!attr) attr = this.getPosition();\n        const array = attr.data;\n        // Data loaded shouldn't haave stride, only buffers\n        // const stride = attr.stride ? attr.stride / array.BYTES_PER_ELEMENT : attr.size;\n        const stride = attr.size;\n\n        if (!this.bounds) {\n            this.bounds = {\n                min: new Vec3(),\n                max: new Vec3(),\n                center: new Vec3(),\n                scale: new Vec3(),\n                radius: Infinity,\n            };\n        }\n\n        const min = this.bounds.min;\n        const max = this.bounds.max;\n        const center = this.bounds.center;\n        const scale = this.bounds.scale;\n\n        min.set(+Infinity);\n        max.set(-Infinity);\n\n        // TODO: check size of position (eg triangle with Vec2)\n        for (let i = 0, l = array.length; i < l; i += stride) {\n            const x = array[i];\n            const y = array[i + 1];\n            const z = array[i + 2];\n\n            min.x = Math.min(x, min.x);\n            min.y = Math.min(y, min.y);\n            min.z = Math.min(z, min.z);\n\n            max.x = Math.max(x, max.x);\n            max.y = Math.max(y, max.y);\n            max.z = Math.max(z, max.z);\n        }\n\n        scale.sub(max, min);\n        center.add(min, max).divide(2);\n    }\n\n    computeBoundingSphere(attr) {\n        if (!attr) attr = this.getPosition();\n        const array = attr.data;\n        // Data loaded shouldn't haave stride, only buffers\n        // const stride = attr.stride ? attr.stride / array.BYTES_PER_ELEMENT : attr.size;\n        const stride = attr.size;\n\n        if (!this.bounds) this.computeBoundingBox(attr);\n\n        let maxRadiusSq = 0;\n        for (let i = 0, l = array.length; i < l; i += stride) {\n            tempVec3.fromArray(array, i);\n            maxRadiusSq = Math.max(maxRadiusSq, this.bounds.center.squaredDistance(tempVec3));\n        }\n\n        this.bounds.radius = Math.sqrt(maxRadiusSq);\n    }\n\n    remove() {\n        for (let key in this.VAOs) {\n            this.gl.renderer.deleteVertexArray(this.VAOs[key]);\n            delete this.VAOs[key];\n        }\n        for (let key in this.attributes) {\n            this.gl.deleteBuffer(this.attributes[key].buffer);\n            delete this.attributes[key];\n        }\n    }\n}\n", "// TODO: upload empty texture if null ? maybe not\n// TODO: upload identity matrix if null ?\n// TODO: sampler Cube\n\nlet ID = 1;\n\n// cache of typed arrays used to flatten uniform arrays\nconst arrayCacheF32 = {};\n\nexport class Program {\n    constructor(\n        gl,\n        {\n            vertex,\n            fragment,\n            uniforms = {},\n\n            transparent = false,\n            cullFace = gl.BACK,\n            frontFace = gl.CCW,\n            depthTest = true,\n            depthWrite = true,\n            depthFunc = gl.LESS,\n        } = {}\n    ) {\n        if (!gl.canvas) console.error('gl not passed as first argument to Program');\n        this.gl = gl;\n        this.uniforms = uniforms;\n        this.id = ID++;\n\n        if (!vertex) console.warn('vertex shader not supplied');\n        if (!fragment) console.warn('fragment shader not supplied');\n\n        // Store program state\n        this.transparent = transparent;\n        this.cullFace = cullFace;\n        this.frontFace = frontFace;\n        this.depthTest = depthTest;\n        this.depthWrite = depthWrite;\n        this.depthFunc = depthFunc;\n        this.blendFunc = {};\n        this.blendEquation = {};\n\n        // set default blendFunc if transparent flagged\n        if (this.transparent && !this.blendFunc.src) {\n            if (this.gl.renderer.premultipliedAlpha) this.setBlendFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\n            else this.setBlendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n        }\n\n        // compile vertex shader and log errors\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        gl.shaderSource(vertexShader, vertex);\n        gl.compileShader(vertexShader);\n        if (gl.getShaderInfoLog(vertexShader) !== '') {\n            console.warn(`${gl.getShaderInfoLog(vertexShader)}\\nVertex Shader\\n${addLineNumbers(vertex)}`);\n        }\n\n        // compile fragment shader and log errors\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        gl.shaderSource(fragmentShader, fragment);\n        gl.compileShader(fragmentShader);\n        if (gl.getShaderInfoLog(fragmentShader) !== '') {\n            console.warn(`${gl.getShaderInfoLog(fragmentShader)}\\nFragment Shader\\n${addLineNumbers(fragment)}`);\n        }\n\n        // compile program and log errors\n        this.program = gl.createProgram();\n        gl.attachShader(this.program, vertexShader);\n        gl.attachShader(this.program, fragmentShader);\n        gl.linkProgram(this.program);\n        if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\n            return console.warn(gl.getProgramInfoLog(this.program));\n        }\n\n        // Remove shader once linked\n        gl.deleteShader(vertexShader);\n        gl.deleteShader(fragmentShader);\n\n        // Get active uniform locations\n        this.uniformLocations = new Map();\n        let numUniforms = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);\n        for (let uIndex = 0; uIndex < numUniforms; uIndex++) {\n            let uniform = gl.getActiveUniform(this.program, uIndex);\n            this.uniformLocations.set(uniform, gl.getUniformLocation(this.program, uniform.name));\n\n            // split uniforms' names to separate array and struct declarations\n            const split = uniform.name.match(/(\\w+)/g);\n\n            uniform.uniformName = split[0];\n\n            if (split.length === 3) {\n                uniform.isStructArray = true;\n                uniform.structIndex = Number(split[1]);\n                uniform.structProperty = split[2];\n            } else if (split.length === 2 && isNaN(Number(split[1]))) {\n                uniform.isStruct = true;\n                uniform.structProperty = split[1];\n            }\n        }\n\n        // Get active attribute locations\n        this.attributeLocations = new Map();\n        const locations = [];\n        const numAttribs = gl.getProgramParameter(this.program, gl.ACTIVE_ATTRIBUTES);\n        for (let aIndex = 0; aIndex < numAttribs; aIndex++) {\n            const attribute = gl.getActiveAttrib(this.program, aIndex);\n            const location = gl.getAttribLocation(this.program, attribute.name);\n            // Ignore special built-in inputs. eg gl_VertexID, gl_InstanceID\n            if (location === -1) continue;\n            locations[location] = attribute.name;\n            this.attributeLocations.set(attribute, location);\n        }\n        this.attributeOrder = locations.join('');\n    }\n\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        this.blendFunc.src = src;\n        this.blendFunc.dst = dst;\n        this.blendFunc.srcAlpha = srcAlpha;\n        this.blendFunc.dstAlpha = dstAlpha;\n        if (src) this.transparent = true;\n    }\n\n    setBlendEquation(modeRGB, modeAlpha) {\n        this.blendEquation.modeRGB = modeRGB;\n        this.blendEquation.modeAlpha = modeAlpha;\n    }\n\n    applyState() {\n        if (this.depthTest) this.gl.renderer.enable(this.gl.DEPTH_TEST);\n        else this.gl.renderer.disable(this.gl.DEPTH_TEST);\n\n        if (this.cullFace) this.gl.renderer.enable(this.gl.CULL_FACE);\n        else this.gl.renderer.disable(this.gl.CULL_FACE);\n\n        if (this.blendFunc.src) this.gl.renderer.enable(this.gl.BLEND);\n        else this.gl.renderer.disable(this.gl.BLEND);\n\n        if (this.cullFace) this.gl.renderer.setCullFace(this.cullFace);\n        this.gl.renderer.setFrontFace(this.frontFace);\n        this.gl.renderer.setDepthMask(this.depthWrite);\n        this.gl.renderer.setDepthFunc(this.depthFunc);\n        if (this.blendFunc.src)\n            this.gl.renderer.setBlendFunc(this.blendFunc.src, this.blendFunc.dst, this.blendFunc.srcAlpha, this.blendFunc.dstAlpha);\n        this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB, this.blendEquation.modeAlpha);\n    }\n\n    use({ flipFaces = false } = {}) {\n        let textureUnit = -1;\n        const programActive = this.gl.renderer.state.currentProgram === this.id;\n\n        // Avoid gl call if program already in use\n        if (!programActive) {\n            this.gl.useProgram(this.program);\n            this.gl.renderer.state.currentProgram = this.id;\n        }\n\n        // Set only the active uniforms found in the shader\n        this.uniformLocations.forEach((location, activeUniform) => {\n            let name = activeUniform.uniformName;\n\n            // get supplied uniform\n            let uniform = this.uniforms[name];\n\n            // For structs, get the specific property instead of the entire object\n            if (activeUniform.isStruct) {\n                uniform = uniform[activeUniform.structProperty];\n                name += `.${activeUniform.structProperty}`;\n            }\n            if (activeUniform.isStructArray) {\n                uniform = uniform[activeUniform.structIndex][activeUniform.structProperty];\n                name += `[${activeUniform.structIndex}].${activeUniform.structProperty}`;\n            }\n\n            if (!uniform) {\n                return warn(`Active uniform ${name} has not been supplied`);\n            }\n\n            if (uniform && uniform.value === undefined) {\n                return warn(`${name} uniform is missing a value parameter`);\n            }\n\n            if (uniform.value.texture) {\n                textureUnit = textureUnit + 1;\n\n                // Check if texture needs to be updated\n                uniform.value.update(textureUnit);\n                return setUniform(this.gl, activeUniform.type, location, textureUnit);\n            }\n\n            // For texture arrays, set uniform as an array of texture units instead of just one\n            if (uniform.value.length && uniform.value[0].texture) {\n                const textureUnits = [];\n                uniform.value.forEach((value) => {\n                    textureUnit = textureUnit + 1;\n                    value.update(textureUnit);\n                    textureUnits.push(textureUnit);\n                });\n\n                return setUniform(this.gl, activeUniform.type, location, textureUnits);\n            }\n\n            setUniform(this.gl, activeUniform.type, location, uniform.value);\n        });\n\n        this.applyState();\n        if (flipFaces) this.gl.renderer.setFrontFace(this.frontFace === this.gl.CCW ? this.gl.CW : this.gl.CCW);\n    }\n\n    remove() {\n        this.gl.deleteProgram(this.program);\n    }\n}\n\nfunction setUniform(gl, type, location, value) {\n    value = value.length ? flatten(value) : value;\n    const setValue = gl.renderer.state.uniformLocations.get(location);\n\n    // Avoid redundant uniform commands\n    if (value.length) {\n        if (setValue === undefined || setValue.length !== value.length) {\n            // clone array to store as cache\n            gl.renderer.state.uniformLocations.set(location, value.slice(0));\n        } else {\n            if (arraysEqual(setValue, value)) return;\n\n            // Update cached array values\n            setValue.set ? setValue.set(value) : setArray(setValue, value);\n            gl.renderer.state.uniformLocations.set(location, setValue);\n        }\n    } else {\n        if (setValue === value) return;\n        gl.renderer.state.uniformLocations.set(location, value);\n    }\n\n    switch (type) {\n        case 5126:\n            return value.length ? gl.uniform1fv(location, value) : gl.uniform1f(location, value); // FLOAT\n        case 35664:\n            return gl.uniform2fv(location, value); // FLOAT_VEC2\n        case 35665:\n            return gl.uniform3fv(location, value); // FLOAT_VEC3\n        case 35666:\n            return gl.uniform4fv(location, value); // FLOAT_VEC4\n        case 35670: // BOOL\n        case 5124: // INT\n        case 35678: // SAMPLER_2D\n        case 35680:\n            return value.length ? gl.uniform1iv(location, value) : gl.uniform1i(location, value); // SAMPLER_CUBE\n        case 35671: // BOOL_VEC2\n        case 35667:\n            return gl.uniform2iv(location, value); // INT_VEC2\n        case 35672: // BOOL_VEC3\n        case 35668:\n            return gl.uniform3iv(location, value); // INT_VEC3\n        case 35673: // BOOL_VEC4\n        case 35669:\n            return gl.uniform4iv(location, value); // INT_VEC4\n        case 35674:\n            return gl.uniformMatrix2fv(location, false, value); // FLOAT_MAT2\n        case 35675:\n            return gl.uniformMatrix3fv(location, false, value); // FLOAT_MAT3\n        case 35676:\n            return gl.uniformMatrix4fv(location, false, value); // FLOAT_MAT4\n    }\n}\n\nfunction addLineNumbers(string) {\n    let lines = string.split('\\n');\n    for (let i = 0; i < lines.length; i++) {\n        lines[i] = i + 1 + ': ' + lines[i];\n    }\n    return lines.join('\\n');\n}\n\nfunction flatten(a) {\n    const arrayLen = a.length;\n    const valueLen = a[0].length;\n    if (valueLen === undefined) return a;\n    const length = arrayLen * valueLen;\n    let value = arrayCacheF32[length];\n    if (!value) arrayCacheF32[length] = value = new Float32Array(length);\n    for (let i = 0; i < arrayLen; i++) value.set(a[i], i * valueLen);\n    return value;\n}\n\nfunction arraysEqual(a, b) {\n    if (a.length !== b.length) return false;\n    for (let i = 0, l = a.length; i < l; i++) {\n        if (a[i] !== b[i]) return false;\n    }\n    return true;\n}\n\nfunction setArray(a, b) {\n    for (let i = 0, l = a.length; i < l; i++) {\n        a[i] = b[i];\n    }\n}\n\nlet warnCount = 0;\nfunction warn(message) {\n    if (warnCount > 100) return;\n    console.warn(message);\n    warnCount++;\n    if (warnCount > 100) console.warn('More than 100 program warnings - stopping logs.');\n}\n", "import { Vec3 } from '../math/Vec3.js';\n\n// TODO: Handle context loss https://www.khronos.org/webgl/wiki/HandlingContextLost\n\n// Not automatic - devs to use these methods manually\n// gl.colorMask( colorMask, colorMask, colorMask, colorMask );\n// gl.clearColor( r, g, b, a );\n// gl.stencilMask( stencilMask );\n// gl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n// gl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n// gl.clearStencil( stencil );\n\nconst tempVec3 = new Vec3();\nlet ID = 1;\n\nexport class Renderer {\n    constructor({\n        canvas = document.createElement('canvas'),\n        width = 300,\n        height = 150,\n        dpr = 1,\n        alpha = false,\n        depth = true,\n        stencil = false,\n        antialias = false,\n        premultipliedAlpha = false,\n        preserveDrawingBuffer = false,\n        powerPreference = 'default',\n        autoClear = true,\n        webgl = 2,\n    } = {}) {\n        const attributes = { alpha, depth, stencil, antialias, premultipliedAlpha, preserveDrawingBuffer, powerPreference };\n        this.dpr = dpr;\n        this.alpha = alpha;\n        this.color = true;\n        this.depth = depth;\n        this.stencil = stencil;\n        this.premultipliedAlpha = premultipliedAlpha;\n        this.autoClear = autoClear;\n        this.id = ID++;\n\n        // Attempt WebGL2 unless forced to 1, if not supported fallback to WebGL1\n        if (webgl === 2) this.gl = canvas.getContext('webgl2', attributes);\n        this.isWebgl2 = !!this.gl;\n        if (!this.gl) this.gl = canvas.getContext('webgl', attributes);\n        if (!this.gl) console.error('unable to create webgl context');\n\n        // Attach renderer to gl so that all classes have access to internal state functions\n        this.gl.renderer = this;\n\n        // initialise size values\n        this.setSize(width, height);\n\n        // gl state stores to avoid redundant calls on methods used internally\n        this.state = {};\n        this.state.blendFunc = { src: this.gl.ONE, dst: this.gl.ZERO };\n        this.state.blendEquation = { modeRGB: this.gl.FUNC_ADD };\n        this.state.cullFace = null;\n        this.state.frontFace = this.gl.CCW;\n        this.state.depthMask = true;\n        this.state.depthFunc = this.gl.LESS;\n        this.state.premultiplyAlpha = false;\n        this.state.flipY = false;\n        this.state.unpackAlignment = 4;\n        this.state.framebuffer = null;\n        this.state.viewport = { x: 0, y: 0, width: null, height: null };\n        this.state.textureUnits = [];\n        this.state.activeTextureUnit = 0;\n        this.state.boundBuffer = null;\n        this.state.uniformLocations = new Map();\n        this.state.currentProgram = null;\n\n        // store requested extensions\n        this.extensions = {};\n\n        // Initialise extra format types\n        if (this.isWebgl2) {\n            this.getExtension('EXT_color_buffer_float');\n            this.getExtension('OES_texture_float_linear');\n        } else {\n            this.getExtension('OES_texture_float');\n            this.getExtension('OES_texture_float_linear');\n            this.getExtension('OES_texture_half_float');\n            this.getExtension('OES_texture_half_float_linear');\n            this.getExtension('OES_element_index_uint');\n            this.getExtension('OES_standard_derivatives');\n            this.getExtension('EXT_sRGB');\n            this.getExtension('WEBGL_depth_texture');\n            this.getExtension('WEBGL_draw_buffers');\n        }\n        this.getExtension('WEBGL_compressed_texture_astc');\n        this.getExtension('EXT_texture_compression_bptc');\n        this.getExtension('WEBGL_compressed_texture_s3tc');\n        this.getExtension('WEBGL_compressed_texture_etc1');\n        this.getExtension('WEBGL_compressed_texture_pvrtc');\n        this.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');\n\n        // Create method aliases using extension (WebGL1) or native if available (WebGL2)\n        this.vertexAttribDivisor = this.getExtension('ANGLE_instanced_arrays', 'vertexAttribDivisor', 'vertexAttribDivisorANGLE');\n        this.drawArraysInstanced = this.getExtension('ANGLE_instanced_arrays', 'drawArraysInstanced', 'drawArraysInstancedANGLE');\n        this.drawElementsInstanced = this.getExtension('ANGLE_instanced_arrays', 'drawElementsInstanced', 'drawElementsInstancedANGLE');\n        this.createVertexArray = this.getExtension('OES_vertex_array_object', 'createVertexArray', 'createVertexArrayOES');\n        this.bindVertexArray = this.getExtension('OES_vertex_array_object', 'bindVertexArray', 'bindVertexArrayOES');\n        this.deleteVertexArray = this.getExtension('OES_vertex_array_object', 'deleteVertexArray', 'deleteVertexArrayOES');\n        this.drawBuffers = this.getExtension('WEBGL_draw_buffers', 'drawBuffers', 'drawBuffersWEBGL');\n\n        // Store device parameters\n        this.parameters = {};\n        this.parameters.maxTextureUnits = this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n        this.parameters.maxAnisotropy = this.getExtension('EXT_texture_filter_anisotropic')\n            ? this.gl.getParameter(this.getExtension('EXT_texture_filter_anisotropic').MAX_TEXTURE_MAX_ANISOTROPY_EXT)\n            : 0;\n    }\n\n    setSize(width, height) {\n        this.width = width;\n        this.height = height;\n\n        this.gl.canvas.width = width * this.dpr;\n        this.gl.canvas.height = height * this.dpr;\n\n        if (!this.gl.canvas.style) return;\n        Object.assign(this.gl.canvas.style, {\n            width: width + 'px',\n            height: height + 'px',\n        });\n    }\n\n    setViewport(width, height, x = 0, y = 0) {\n        if (this.state.viewport.width === width && this.state.viewport.height === height) return;\n        this.state.viewport.width = width;\n        this.state.viewport.height = height;\n        this.state.viewport.x = x;\n        this.state.viewport.y = y;\n        this.gl.viewport(x, y, width, height);\n    }\n\n    setScissor(width, height, x = 0, y = 0) {\n        this.gl.scissor(x, y, width, height);\n    }\n\n    enable(id) {\n        if (this.state[id] === true) return;\n        this.gl.enable(id);\n        this.state[id] = true;\n    }\n\n    disable(id) {\n        if (this.state[id] === false) return;\n        this.gl.disable(id);\n        this.state[id] = false;\n    }\n\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        if (\n            this.state.blendFunc.src === src &&\n            this.state.blendFunc.dst === dst &&\n            this.state.blendFunc.srcAlpha === srcAlpha &&\n            this.state.blendFunc.dstAlpha === dstAlpha\n        )\n            return;\n        this.state.blendFunc.src = src;\n        this.state.blendFunc.dst = dst;\n        this.state.blendFunc.srcAlpha = srcAlpha;\n        this.state.blendFunc.dstAlpha = dstAlpha;\n        if (srcAlpha !== undefined) this.gl.blendFuncSeparate(src, dst, srcAlpha, dstAlpha);\n        else this.gl.blendFunc(src, dst);\n    }\n\n    setBlendEquation(modeRGB, modeAlpha) {\n        modeRGB = modeRGB || this.gl.FUNC_ADD;\n        if (this.state.blendEquation.modeRGB === modeRGB && this.state.blendEquation.modeAlpha === modeAlpha) return;\n        this.state.blendEquation.modeRGB = modeRGB;\n        this.state.blendEquation.modeAlpha = modeAlpha;\n        if (modeAlpha !== undefined) this.gl.blendEquationSeparate(modeRGB, modeAlpha);\n        else this.gl.blendEquation(modeRGB);\n    }\n\n    setCullFace(value) {\n        if (this.state.cullFace === value) return;\n        this.state.cullFace = value;\n        this.gl.cullFace(value);\n    }\n\n    setFrontFace(value) {\n        if (this.state.frontFace === value) return;\n        this.state.frontFace = value;\n        this.gl.frontFace(value);\n    }\n\n    setDepthMask(value) {\n        if (this.state.depthMask === value) return;\n        this.state.depthMask = value;\n        this.gl.depthMask(value);\n    }\n\n    setDepthFunc(value) {\n        if (this.state.depthFunc === value) return;\n        this.state.depthFunc = value;\n        this.gl.depthFunc(value);\n    }\n\n    activeTexture(value) {\n        if (this.state.activeTextureUnit === value) return;\n        this.state.activeTextureUnit = value;\n        this.gl.activeTexture(this.gl.TEXTURE0 + value);\n    }\n\n    bindFramebuffer({ target = this.gl.FRAMEBUFFER, buffer = null } = {}) {\n        if (this.state.framebuffer === buffer) return;\n        this.state.framebuffer = buffer;\n        this.gl.bindFramebuffer(target, buffer);\n    }\n\n    getExtension(extension, webgl2Func, extFunc) {\n        // if webgl2 function supported, return func bound to gl context\n        if (webgl2Func && this.gl[webgl2Func]) return this.gl[webgl2Func].bind(this.gl);\n\n        // fetch extension once only\n        if (!this.extensions[extension]) {\n            this.extensions[extension] = this.gl.getExtension(extension);\n        }\n\n        // return extension if no function requested\n        if (!webgl2Func) return this.extensions[extension];\n\n        // Return null if extension not supported\n        if (!this.extensions[extension]) return null;\n\n        // return extension function, bound to extension\n        return this.extensions[extension][extFunc].bind(this.extensions[extension]);\n    }\n\n    sortOpaque(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        } else if (a.program.id !== b.program.id) {\n            return a.program.id - b.program.id;\n        } else if (a.zDepth !== b.zDepth) {\n            return a.zDepth - b.zDepth;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    sortTransparent(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        }\n        if (a.zDepth !== b.zDepth) {\n            return b.zDepth - a.zDepth;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    sortUI(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        } else if (a.program.id !== b.program.id) {\n            return a.program.id - b.program.id;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    getRenderList({ scene, camera, frustumCull, sort }) {\n        let renderList = [];\n\n        if (camera && frustumCull) camera.updateFrustum();\n\n        // Get visible\n        scene.traverse((node) => {\n            if (!node.visible) return true;\n            if (!node.draw) return;\n\n            if (frustumCull && node.frustumCulled && camera) {\n                if (!camera.frustumIntersectsMesh(node)) return;\n            }\n\n            renderList.push(node);\n        });\n\n        if (sort) {\n            const opaque = [];\n            const transparent = []; // depthTest true\n            const ui = []; // depthTest false\n\n            renderList.forEach((node) => {\n                // Split into the 3 render groups\n                if (!node.program.transparent) {\n                    opaque.push(node);\n                } else if (node.program.depthTest) {\n                    transparent.push(node);\n                } else {\n                    ui.push(node);\n                }\n\n                node.zDepth = 0;\n\n                // Only calculate z-depth if renderOrder unset and depthTest is true\n                if (node.renderOrder !== 0 || !node.program.depthTest || !camera) return;\n\n                // update z-depth\n                node.worldMatrix.getTranslation(tempVec3);\n                tempVec3.applyMatrix4(camera.projectionViewMatrix);\n                node.zDepth = tempVec3.z;\n            });\n\n            opaque.sort(this.sortOpaque);\n            transparent.sort(this.sortTransparent);\n            ui.sort(this.sortUI);\n\n            renderList = opaque.concat(transparent, ui);\n        }\n\n        return renderList;\n    }\n\n    render({ scene, camera, target = null, update = true, sort = true, frustumCull = true, clear }) {\n        if (target === null) {\n            // make sure no render target bound so draws to canvas\n            this.bindFramebuffer();\n            this.setViewport(this.width * this.dpr, this.height * this.dpr);\n        } else {\n            // bind supplied render target and update viewport\n            this.bindFramebuffer(target);\n            this.setViewport(target.width, target.height);\n        }\n\n        if (clear || (this.autoClear && clear !== false)) {\n            // Ensure depth buffer writing is enabled so it can be cleared\n            if (this.depth && (!target || target.depth)) {\n                this.enable(this.gl.DEPTH_TEST);\n                this.setDepthMask(true);\n            }\n            this.gl.clear(\n                (this.color ? this.gl.COLOR_BUFFER_BIT : 0) |\n                    (this.depth ? this.gl.DEPTH_BUFFER_BIT : 0) |\n                    (this.stencil ? this.gl.STENCIL_BUFFER_BIT : 0)\n            );\n        }\n\n        // updates all scene graph matrices\n        if (update) scene.updateMatrixWorld();\n\n        // Update camera separately, in case not in scene graph\n        if (camera) camera.updateMatrixWorld();\n\n        // Get render list - entails culling and sorting\n        const renderList = this.getRenderList({ scene, camera, frustumCull, sort });\n\n        renderList.forEach((node) => {\n            node.draw({ camera });\n        });\n    }\n}\n", "const EPSILON = 0.000001;\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let w = a[3];\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let w = a[3];\n    let len = x * x + y * y + z * z + w * w;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    let aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n}\n", "import * as vec4 from './Vec4Func.js';\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n    rad = rad * 0.5;\n    let s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n}\n\n/**\n * Multiplies two quats\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2],\n        bw = b[3];\n\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let by = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bz = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2],\n        bw = b[3];\n\n    let omega, cosom, sinom, scale0, scale1;\n\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if (cosom < 0.0) {\n        cosom = -cosom;\n        bx = -bx;\n        by = -by;\n        bz = -bz;\n        bw = -bw;\n    }\n    // calculate coefficients\n    if (1.0 - cosom > 0.000001) {\n        // standard case (slerp)\n        omega = Math.acos(cosom);\n        sinom = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n    } else {\n        // \"from\" and \"to\" quaternions are very close\n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n\n    return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n    let a0 = a[0],\n        a1 = a[1],\n        a2 = a[2],\n        a3 = a[3];\n    let dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n    let invDot = dot ? 1.0 / dot : 0;\n\n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    out[0] = -a0 * invDot;\n    out[1] = -a1 * invDot;\n    out[2] = -a2 * invDot;\n    out[3] = a3 * invDot;\n    return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    let fTrace = m[0] + m[4] + m[8];\n    let fRoot;\n\n    if (fTrace > 0.0) {\n        // |w| > 1/2, may as well choose w > 1/2\n        fRoot = Math.sqrt(fTrace + 1.0); // 2w\n        out[3] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot; // 1/(4w)\n        out[0] = (m[5] - m[7]) * fRoot;\n        out[1] = (m[6] - m[2]) * fRoot;\n        out[2] = (m[1] - m[3]) * fRoot;\n    } else {\n        // |w| <= 1/2\n        let i = 0;\n        if (m[4] > m[0]) i = 1;\n        if (m[8] > m[i * 3 + i]) i = 2;\n        let j = (i + 1) % 3;\n        let k = (i + 2) % 3;\n\n        fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n        out[i] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n        out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n        out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n    }\n\n    return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} euler Angles to rotate around each axis in degrees.\n * @param {String} order detailing order of operations. Default 'XYZ'.\n * @returns {quat} out\n * @function\n */\nexport function fromEuler(out, euler, order = 'YXZ') {\n    let sx = Math.sin(euler[0] * 0.5);\n    let cx = Math.cos(euler[0] * 0.5);\n    let sy = Math.sin(euler[1] * 0.5);\n    let cy = Math.cos(euler[1] * 0.5);\n    let sz = Math.sin(euler[2] * 0.5);\n    let cz = Math.cos(euler[2] * 0.5);\n\n    if (order === 'XYZ') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'YXZ') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    } else if (order === 'ZXY') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'ZYX') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    } else if (order === 'YZX') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'XZY') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    }\n\n    return out;\n}\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n", "import * as QuatFunc from './functions/QuatFunc.js';\n\nexport class Quat extends Array {\n    constructor(x = 0, y = 0, z = 0, w = 1) {\n        super(x, y, z, w);\n        this.onChange = () => {};\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    get w() {\n        return this[3];\n    }\n\n    set x(v) {\n        this[0] = v;\n        this.onChange();\n    }\n\n    set y(v) {\n        this[1] = v;\n        this.onChange();\n    }\n\n    set z(v) {\n        this[2] = v;\n        this.onChange();\n    }\n\n    set w(v) {\n        this[3] = v;\n        this.onChange();\n    }\n\n    identity() {\n        QuatFunc.identity(this);\n        this.onChange();\n        return this;\n    }\n\n    set(x, y, z, w) {\n        if (x.length) return this.copy(x);\n        QuatFunc.set(this, x, y, z, w);\n        this.onChange();\n        return this;\n    }\n\n    rotateX(a) {\n        QuatFunc.rotateX(this, this, a);\n        this.onChange();\n        return this;\n    }\n\n    rotateY(a) {\n        QuatFunc.rotateY(this, this, a);\n        this.onChange();\n        return this;\n    }\n\n    rotateZ(a) {\n        QuatFunc.rotateZ(this, this, a);\n        this.onChange();\n        return this;\n    }\n\n    inverse(q = this) {\n        QuatFunc.invert(this, q);\n        this.onChange();\n        return this;\n    }\n\n    conjugate(q = this) {\n        QuatFunc.conjugate(this, q);\n        this.onChange();\n        return this;\n    }\n\n    copy(q) {\n        QuatFunc.copy(this, q);\n        this.onChange();\n        return this;\n    }\n\n    normalize(q = this) {\n        QuatFunc.normalize(this, q);\n        this.onChange();\n        return this;\n    }\n\n    multiply(qA, qB) {\n        if (qB) {\n            QuatFunc.multiply(this, qA, qB);\n        } else {\n            QuatFunc.multiply(this, this, qA);\n        }\n        this.onChange();\n        return this;\n    }\n\n    dot(v) {\n        return QuatFunc.dot(this, v);\n    }\n\n    fromMatrix3(matrix3) {\n        QuatFunc.fromMat3(this, matrix3);\n        this.onChange();\n        return this;\n    }\n\n    fromEuler(euler) {\n        QuatFunc.fromEuler(this, euler, euler.order);\n        return this;\n    }\n\n    fromAxisAngle(axis, a) {\n        QuatFunc.setAxisAngle(this, axis, a);\n        this.onChange();\n        return this;\n    }\n\n    slerp(q, t) {\n        QuatFunc.slerp(this, this, q, t);\n        this.onChange();\n        return this;\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        this[3] = a[o + 3];\n        this.onChange();\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        return a;\n    }\n}\n", "const EPSILON = 0.000001;\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n}\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        let a01 = a[1],\n            a02 = a[2],\n            a03 = a[3];\n        let a12 = a[6],\n            a13 = a[7];\n        let a23 = a[11];\n\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n\n    return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    let b0 = b[0],\n        b1 = b[1],\n        b2 = b[2],\n        b3 = b[3];\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[4];\n    b1 = b[5];\n    b2 = b[6];\n    b3 = b[7];\n    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[8];\n    b1 = b[9];\n    b2 = b[10];\n    b3 = b[11];\n    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[12];\n    b1 = b[13];\n    b2 = b[14];\n    b3 = b[15];\n    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n    let x = v[0],\n        y = v[1],\n        z = v[2];\n    let a00, a01, a02, a03;\n    let a10, a11, a12, a13;\n    let a20, a21, a22, a23;\n\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0];\n        a01 = a[1];\n        a02 = a[2];\n        a03 = a[3];\n        a10 = a[4];\n        a11 = a[5];\n        a12 = a[6];\n        a13 = a[7];\n        a20 = a[8];\n        a21 = a[9];\n        a22 = a[10];\n        a23 = a[11];\n\n        out[0] = a00;\n        out[1] = a01;\n        out[2] = a02;\n        out[3] = a03;\n        out[4] = a10;\n        out[5] = a11;\n        out[6] = a12;\n        out[7] = a13;\n        out[8] = a20;\n        out[9] = a21;\n        out[10] = a22;\n        out[11] = a23;\n\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n    let x = v[0],\n        y = v[1],\n        z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n    let x = axis[0],\n        y = axis[1],\n        z = axis[2];\n    let len = Math.hypot(x, y, z);\n    let s, c, t;\n    let a00, a01, a02, a03;\n    let a10, a11, a12, a13;\n    let a20, a21, a22, a23;\n    let b00, b01, b02;\n    let b10, b11, b12;\n    let b20, b21, b22;\n\n    if (Math.abs(len) < EPSILON) {\n        return null;\n    }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c;\n    b01 = y * x * t + z * s;\n    b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s;\n    b11 = y * y * t + c;\n    b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s;\n    b21 = y * z * t - x * s;\n    b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) {\n        // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n    out[0] = mat[12];\n    out[1] = mat[13];\n    out[2] = mat[14];\n\n    return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n    let m11 = mat[0];\n    let m12 = mat[1];\n    let m13 = mat[2];\n    let m21 = mat[4];\n    let m22 = mat[5];\n    let m23 = mat[6];\n    let m31 = mat[8];\n    let m32 = mat[9];\n    let m33 = mat[10];\n\n    out[0] = Math.hypot(m11, m12, m13);\n    out[1] = Math.hypot(m21, m22, m23);\n    out[2] = Math.hypot(m31, m32, m33);\n\n    return out;\n}\n\nexport function getMaxScaleOnAxis(mat) {\n    let m11 = mat[0];\n    let m12 = mat[1];\n    let m13 = mat[2];\n    let m21 = mat[4];\n    let m22 = mat[5];\n    let m23 = mat[6];\n    let m31 = mat[8];\n    let m32 = mat[9];\n    let m33 = mat[10];\n\n    const x = m11 * m11 + m12 * m12 + m13 * m13;\n    const y = m21 * m21 + m22 * m22 + m23 * m23;\n    const z = m31 * m31 + m32 * m32 + m33 * m33;\n\n    return Math.sqrt(Math.max(x, y, z));\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport const getRotation = (function () {\n    const temp = [0, 0, 0];\n\n    return function (out, mat) {\n        let scaling = temp;\n        getScaling(scaling, mat);\n\n        let is1 = 1 / scaling[0];\n        let is2 = 1 / scaling[1];\n        let is3 = 1 / scaling[2];\n\n        let sm11 = mat[0] * is1;\n        let sm12 = mat[1] * is2;\n        let sm13 = mat[2] * is3;\n        let sm21 = mat[4] * is1;\n        let sm22 = mat[5] * is2;\n        let sm23 = mat[6] * is3;\n        let sm31 = mat[8] * is1;\n        let sm32 = mat[9] * is2;\n        let sm33 = mat[10] * is3;\n\n        let trace = sm11 + sm22 + sm33;\n        let S = 0;\n\n        if (trace > 0) {\n            S = Math.sqrt(trace + 1.0) * 2;\n            out[3] = 0.25 * S;\n            out[0] = (sm23 - sm32) / S;\n            out[1] = (sm31 - sm13) / S;\n            out[2] = (sm12 - sm21) / S;\n        } else if (sm11 > sm22 && sm11 > sm33) {\n            S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n            out[3] = (sm23 - sm32) / S;\n            out[0] = 0.25 * S;\n            out[1] = (sm12 + sm21) / S;\n            out[2] = (sm31 + sm13) / S;\n        } else if (sm22 > sm33) {\n            S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n            out[3] = (sm31 - sm13) / S;\n            out[0] = (sm12 + sm21) / S;\n            out[1] = 0.25 * S;\n            out[2] = (sm23 + sm32) / S;\n        } else {\n            S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n            out[3] = (sm12 - sm21) / S;\n            out[0] = (sm31 + sm13) / S;\n            out[1] = (sm23 + sm32) / S;\n            out[2] = 0.25 * S;\n        }\n\n        return out;\n    };\n})();\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n    // Quaternion math\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let xy = x * y2;\n    let xz = x * z2;\n    let yy = y * y2;\n    let yz = y * z2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n    let sx = s[0];\n    let sy = s[1];\n    let sz = s[2];\n\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspective(out, fovy, aspect, near, far) {\n    let f = 1.0 / Math.tan(fovy / 2);\n    let nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 2 * far * near * nf;\n    out[15] = 0;\n    return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function ortho(out, left, right, bottom, top, near, far) {\n    let lr = 1 / (left - right);\n    let bt = 1 / (bottom - top);\n    let nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} target Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n    let eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2];\n\n    let z0 = eyex - target[0],\n        z1 = eyey - target[1],\n        z2 = eyez - target[2];\n\n    let len = z0 * z0 + z1 * z1 + z2 * z2;\n    if (len === 0) {\n        // eye and target are in the same position\n        z2 = 1;\n    } else {\n        len = 1 / Math.sqrt(len);\n        z0 *= len;\n        z1 *= len;\n        z2 *= len;\n    }\n\n    let x0 = upy * z2 - upz * z1,\n        x1 = upz * z0 - upx * z2,\n        x2 = upx * z1 - upy * z0;\n\n    len = x0 * x0 + x1 * x1 + x2 * x2;\n    if (len === 0) {\n        // up and z are parallel\n        if (upz) {\n            upx += 1e-6;\n        } else if (upy) {\n            upz += 1e-6;\n        } else {\n            upy += 1e-6;\n        }\n        (x0 = upy * z2 - upz * z1), (x1 = upz * z0 - upx * z2), (x2 = upx * z1 - upy * z0);\n\n        len = x0 * x0 + x1 * x1 + x2 * x2;\n    }\n\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n\n    out[0] = x0;\n    out[1] = x1;\n    out[2] = x2;\n    out[3] = 0;\n    out[4] = z1 * x2 - z2 * x1;\n    out[5] = z2 * x0 - z0 * x2;\n    out[6] = z0 * x1 - z1 * x0;\n    out[7] = 0;\n    out[8] = z0;\n    out[9] = z1;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = eyex;\n    out[13] = eyey;\n    out[14] = eyez;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    out[9] = a[9] + b[9];\n    out[10] = a[10] + b[10];\n    out[11] = a[11] + b[11];\n    out[12] = a[12] + b[12];\n    out[13] = a[13] + b[13];\n    out[14] = a[14] + b[14];\n    out[15] = a[15] + b[15];\n    return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    out[9] = a[9] - b[9];\n    out[10] = a[10] - b[10];\n    out[11] = a[11] - b[11];\n    out[12] = a[12] - b[12];\n    out[13] = a[13] - b[13];\n    out[14] = a[14] - b[14];\n    out[15] = a[15] - b[15];\n    return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    out[9] = a[9] * b;\n    out[10] = a[10] * b;\n    out[11] = a[11] * b;\n    out[12] = a[12] * b;\n    out[13] = a[13] * b;\n    out[14] = a[14] * b;\n    out[15] = a[15] * b;\n    return out;\n}\n", "import * as Mat4Func from './functions/Mat4Func.js';\n\nexport class Mat4 extends Array {\n    constructor(\n        m00 = 1,\n        m01 = 0,\n        m02 = 0,\n        m03 = 0,\n        m10 = 0,\n        m11 = 1,\n        m12 = 0,\n        m13 = 0,\n        m20 = 0,\n        m21 = 0,\n        m22 = 1,\n        m23 = 0,\n        m30 = 0,\n        m31 = 0,\n        m32 = 0,\n        m33 = 1\n    ) {\n        super(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n        return this;\n    }\n\n    get x() {\n        return this[12];\n    }\n\n    get y() {\n        return this[13];\n    }\n\n    get z() {\n        return this[14];\n    }\n\n    get w() {\n        return this[15];\n    }\n\n    set x(v) {\n        this[12] = v;\n    }\n\n    set y(v) {\n        this[13] = v;\n    }\n\n    set z(v) {\n        this[14] = v;\n    }\n\n    set w(v) {\n        this[15] = v;\n    }\n\n    set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n        if (m00.length) return this.copy(m00);\n        Mat4Func.set(this, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n        return this;\n    }\n\n    translate(v, m = this) {\n        Mat4Func.translate(this, m, v);\n        return this;\n    }\n\n    rotate(v, axis, m = this) {\n        Mat4Func.rotate(this, m, v, axis);\n        return this;\n    }\n\n    scale(v, m = this) {\n        Mat4Func.scale(this, m, typeof v === 'number' ? [v, v, v] : v);\n        return this;\n    }\n\n    add(ma, mb) {\n        if (mb) Mat4Func.add(this, ma, mb);\n        else Mat4Func.add(this, this, ma);\n        return this;\n    }\n\n    sub(ma, mb) {\n        if (mb) Mat4Func.subtract(this, ma, mb);\n        else Mat4Func.subtract(this, this, ma);\n        return this;\n    }\n\n    multiply(ma, mb) {\n        if (!ma.length) {\n            Mat4Func.multiplyScalar(this, this, ma);\n        } else if (mb) {\n            Mat4Func.multiply(this, ma, mb);\n        } else {\n            Mat4Func.multiply(this, this, ma);\n        }\n        return this;\n    }\n\n    identity() {\n        Mat4Func.identity(this);\n        return this;\n    }\n\n    copy(m) {\n        Mat4Func.copy(this, m);\n        return this;\n    }\n\n    fromPerspective({ fov, aspect, near, far } = {}) {\n        Mat4Func.perspective(this, fov, aspect, near, far);\n        return this;\n    }\n\n    fromOrthogonal({ left, right, bottom, top, near, far }) {\n        Mat4Func.ortho(this, left, right, bottom, top, near, far);\n        return this;\n    }\n\n    fromQuaternion(q) {\n        Mat4Func.fromQuat(this, q);\n        return this;\n    }\n\n    setPosition(v) {\n        this.x = v[0];\n        this.y = v[1];\n        this.z = v[2];\n        return this;\n    }\n\n    inverse(m = this) {\n        Mat4Func.invert(this, m);\n        return this;\n    }\n\n    compose(q, pos, scale) {\n        Mat4Func.fromRotationTranslationScale(this, q, pos, scale);\n        return this;\n    }\n\n    getRotation(q) {\n        Mat4Func.getRotation(q, this);\n        return this;\n    }\n\n    getTranslation(pos) {\n        Mat4Func.getTranslation(pos, this);\n        return this;\n    }\n\n    getScaling(scale) {\n        Mat4Func.getScaling(scale, this);\n        return this;\n    }\n\n    getMaxScaleOnAxis() {\n        return Mat4Func.getMaxScaleOnAxis(this);\n    }\n\n    lookAt(eye, target, up) {\n        Mat4Func.targetTo(this, eye, target, up);\n        return this;\n    }\n\n    determinant() {\n        return Mat4Func.determinant(this);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        this[3] = a[o + 3];\n        this[4] = a[o + 4];\n        this[5] = a[o + 5];\n        this[6] = a[o + 6];\n        this[7] = a[o + 7];\n        this[8] = a[o + 8];\n        this[9] = a[o + 9];\n        this[10] = a[o + 10];\n        this[11] = a[o + 11];\n        this[12] = a[o + 12];\n        this[13] = a[o + 13];\n        this[14] = a[o + 14];\n        this[15] = a[o + 15];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        a[o + 4] = this[4];\n        a[o + 5] = this[5];\n        a[o + 6] = this[6];\n        a[o + 7] = this[7];\n        a[o + 8] = this[8];\n        a[o + 9] = this[9];\n        a[o + 10] = this[10];\n        a[o + 11] = this[11];\n        a[o + 12] = this[12];\n        a[o + 13] = this[13];\n        a[o + 14] = this[14];\n        a[o + 15] = this[15];\n        return a;\n    }\n}\n", "// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\nexport function fromRotationMatrix(out, m, order = 'YXZ') {\n    if (order === 'XYZ') {\n        out[1] = Math.asin(Math.min(Math.max(m[8], -1), 1));\n        if (Math.abs(m[8]) < 0.99999) {\n            out[0] = Math.atan2(-m[9], m[10]);\n            out[2] = Math.atan2(-m[4], m[0]);\n        } else {\n            out[0] = Math.atan2(m[6], m[5]);\n            out[2] = 0;\n        }\n    } else if (order === 'YXZ') {\n        out[0] = Math.asin(-Math.min(Math.max(m[9], -1), 1));\n        if (Math.abs(m[9]) < 0.99999) {\n            out[1] = Math.atan2(m[8], m[10]);\n            out[2] = Math.atan2(m[1], m[5]);\n        } else {\n            out[1] = Math.atan2(-m[2], m[0]);\n            out[2] = 0;\n        }\n    } else if (order === 'ZXY') {\n        out[0] = Math.asin(Math.min(Math.max(m[6], -1), 1));\n        if (Math.abs(m[6]) < 0.99999) {\n            out[1] = Math.atan2(-m[2], m[10]);\n            out[2] = Math.atan2(-m[4], m[5]);\n        } else {\n            out[1] = 0;\n            out[2] = Math.atan2(m[1], m[0]);\n        }\n    } else if (order === 'ZYX') {\n        out[1] = Math.asin(-Math.min(Math.max(m[2], -1), 1));\n        if (Math.abs(m[2]) < 0.99999) {\n            out[0] = Math.atan2(m[6], m[10]);\n            out[2] = Math.atan2(m[1], m[0]);\n        } else {\n            out[0] = 0;\n            out[2] = Math.atan2(-m[4], m[5]);\n        }\n    } else if (order === 'YZX') {\n        out[2] = Math.asin(Math.min(Math.max(m[1], -1), 1));\n        if (Math.abs(m[1]) < 0.99999) {\n            out[0] = Math.atan2(-m[9], m[5]);\n            out[1] = Math.atan2(-m[2], m[0]);\n        } else {\n            out[0] = 0;\n            out[1] = Math.atan2(m[8], m[10]);\n        }\n    } else if (order === 'XZY') {\n        out[2] = Math.asin(-Math.min(Math.max(m[4], -1), 1));\n        if (Math.abs(m[4]) < 0.99999) {\n            out[0] = Math.atan2(m[6], m[5]);\n            out[1] = Math.atan2(m[8], m[0]);\n        } else {\n            out[0] = Math.atan2(-m[9], m[10]);\n            out[1] = 0;\n        }\n    }\n\n    return out;\n}\n", "import * as EulerFunc from './functions/EulerFunc.js';\nimport { Mat4 } from './Mat4.js';\n\nconst tmpMat4 = new Mat4();\n\nexport class Euler extends Array {\n    constructor(x = 0, y = x, z = x, order = 'YXZ') {\n        super(x, y, z);\n        this.order = order;\n        this.onChange = () => {};\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    set x(v) {\n        this[0] = v;\n        this.onChange();\n    }\n\n    set y(v) {\n        this[1] = v;\n        this.onChange();\n    }\n\n    set z(v) {\n        this[2] = v;\n        this.onChange();\n    }\n\n    set(x, y = x, z = x) {\n        if (x.length) return this.copy(x);\n        this[0] = x;\n        this[1] = y;\n        this[2] = z;\n        this.onChange();\n        return this;\n    }\n\n    copy(v) {\n        this[0] = v[0];\n        this[1] = v[1];\n        this[2] = v[2];\n        this.onChange();\n        return this;\n    }\n\n    reorder(order) {\n        this.order = order;\n        this.onChange();\n        return this;\n    }\n\n    fromRotationMatrix(m, order = this.order) {\n        EulerFunc.fromRotationMatrix(this, m, order);\n        this.onChange();\n        return this;\n    }\n\n    fromQuaternion(q, order = this.order) {\n        tmpMat4.fromQuaternion(q);\n        return this.fromRotationMatrix(tmpMat4, order);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        return a;\n    }\n}\n", "import { Vec3 } from '../math/Vec3.js';\nimport { Quat } from '../math/Quat.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { Euler } from '../math/Euler.js';\n\nexport class Transform {\n    constructor() {\n        this.parent = null;\n        this.children = [];\n        this.visible = true;\n\n        this.matrix = new Mat4();\n        this.worldMatrix = new Mat4();\n        this.matrixAutoUpdate = true;\n\n        this.position = new Vec3();\n        this.quaternion = new Quat();\n        this.scale = new Vec3(1);\n        this.rotation = new Euler();\n        this.up = new Vec3(0, 1, 0);\n\n        this.rotation.onChange = () => this.quaternion.fromEuler(this.rotation);\n        this.quaternion.onChange = () => this.rotation.fromQuaternion(this.quaternion);\n    }\n\n    setParent(parent, notifyParent = true) {\n        if (this.parent && parent !== this.parent) this.parent.removeChild(this, false);\n        this.parent = parent;\n        if (notifyParent && parent) parent.addChild(this, false);\n    }\n\n    addChild(child, notifyChild = true) {\n        if (!~this.children.indexOf(child)) this.children.push(child);\n        if (notifyChild) child.setParent(this, false);\n    }\n\n    removeChild(child, notifyChild = true) {\n        if (!!~this.children.indexOf(child)) this.children.splice(this.children.indexOf(child), 1);\n        if (notifyChild) child.setParent(null, false);\n    }\n\n    updateMatrixWorld(force) {\n        if (this.matrixAutoUpdate) this.updateMatrix();\n        if (this.worldMatrixNeedsUpdate || force) {\n            if (this.parent === null) this.worldMatrix.copy(this.matrix);\n            else this.worldMatrix.multiply(this.parent.worldMatrix, this.matrix);\n            this.worldMatrixNeedsUpdate = false;\n            force = true;\n        }\n\n        for (let i = 0, l = this.children.length; i < l; i++) {\n            this.children[i].updateMatrixWorld(force);\n        }\n    }\n\n    updateMatrix() {\n        this.matrix.compose(this.quaternion, this.position, this.scale);\n        this.worldMatrixNeedsUpdate = true;\n    }\n\n    traverse(callback) {\n        // Return true in callback to stop traversing children\n        if (callback(this)) return;\n        for (let i = 0, l = this.children.length; i < l; i++) {\n            this.children[i].traverse(callback);\n        }\n    }\n\n    decompose() {\n        this.matrix.getTranslation(this.position);\n        this.matrix.getRotation(this.quaternion);\n        this.matrix.getScaling(this.scale);\n        this.rotation.fromQuaternion(this.quaternion);\n    }\n\n    lookAt(target, invert = false) {\n        if (invert) this.matrix.lookAt(this.position, target, this.up);\n        else this.matrix.lookAt(target, this.position, this.up);\n        this.matrix.getRotation(this.quaternion);\n        this.rotation.fromQuaternion(this.quaternion);\n    }\n}\n", "import { Transform } from './Transform.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { Vec3 } from '../math/Vec3.js';\n\nconst tempMat4 = new Mat4();\nconst tempVec3a = new Vec3();\nconst tempVec3b = new Vec3();\n\nexport class Camera extends Transform {\n    constructor(gl, { near = 0.1, far = 100, fov = 45, aspect = 1, left, right, bottom, top, zoom = 1 } = {}) {\n        super();\n\n        Object.assign(this, { near, far, fov, aspect, left, right, bottom, top, zoom });\n\n        this.projectionMatrix = new Mat4();\n        this.viewMatrix = new Mat4();\n        this.projectionViewMatrix = new Mat4();\n        this.worldPosition = new Vec3();\n\n        // Use orthographic if left/right set, else default to perspective camera\n        this.type = left || right ? 'orthographic' : 'perspective';\n\n        if (this.type === 'orthographic') this.orthographic();\n        else this.perspective();\n    }\n\n    perspective({ near = this.near, far = this.far, fov = this.fov, aspect = this.aspect } = {}) {\n        Object.assign(this, { near, far, fov, aspect });\n        this.projectionMatrix.fromPerspective({ fov: fov * (Math.PI / 180), aspect, near, far });\n        this.type = 'perspective';\n        return this;\n    }\n\n    orthographic({\n        near = this.near,\n        far = this.far,\n        left = this.left,\n        right = this.right,\n        bottom = this.bottom,\n        top = this.top,\n        zoom = this.zoom,\n    } = {}) {\n        Object.assign(this, { near, far, left, right, bottom, top, zoom });\n        left /= zoom;\n        right /= zoom;\n        bottom /= zoom;\n        top /= zoom;\n        this.projectionMatrix.fromOrthogonal({ left, right, bottom, top, near, far });\n        this.type = 'orthographic';\n        return this;\n    }\n\n    updateMatrixWorld() {\n        super.updateMatrixWorld();\n        this.viewMatrix.inverse(this.worldMatrix);\n        this.worldMatrix.getTranslation(this.worldPosition);\n\n        // used for sorting\n        this.projectionViewMatrix.multiply(this.projectionMatrix, this.viewMatrix);\n        return this;\n    }\n\n    lookAt(target) {\n        super.lookAt(target, true);\n        return this;\n    }\n\n    // Project 3D coordinate to 2D point\n    project(v) {\n        v.applyMatrix4(this.viewMatrix);\n        v.applyMatrix4(this.projectionMatrix);\n        return this;\n    }\n\n    // Unproject 2D point to 3D coordinate\n    unproject(v) {\n        v.applyMatrix4(tempMat4.inverse(this.projectionMatrix));\n        v.applyMatrix4(this.worldMatrix);\n        return this;\n    }\n\n    updateFrustum() {\n        if (!this.frustum) {\n            this.frustum = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\n        }\n\n        const m = this.projectionViewMatrix;\n        this.frustum[0].set(m[3] - m[0], m[7] - m[4], m[11] - m[8]).constant = m[15] - m[12]; // -x\n        this.frustum[1].set(m[3] + m[0], m[7] + m[4], m[11] + m[8]).constant = m[15] + m[12]; // +x\n        this.frustum[2].set(m[3] + m[1], m[7] + m[5], m[11] + m[9]).constant = m[15] + m[13]; // +y\n        this.frustum[3].set(m[3] - m[1], m[7] - m[5], m[11] - m[9]).constant = m[15] - m[13]; // -y\n        this.frustum[4].set(m[3] - m[2], m[7] - m[6], m[11] - m[10]).constant = m[15] - m[14]; // +z (far)\n        this.frustum[5].set(m[3] + m[2], m[7] + m[6], m[11] + m[10]).constant = m[15] + m[14]; // -z (near)\n\n        for (let i = 0; i < 6; i++) {\n            const invLen = 1.0 / this.frustum[i].distance();\n            this.frustum[i].multiply(invLen);\n            this.frustum[i].constant *= invLen;\n        }\n    }\n\n    frustumIntersectsMesh(node, worldMatrix = node.worldMatrix) {\n        // If no position attribute, treat as frustumCulled false\n        if (!node.geometry.attributes.position) return true;\n\n        if (!node.geometry.bounds || node.geometry.bounds.radius === Infinity) node.geometry.computeBoundingSphere();\n\n        if (!node.geometry.bounds) return true;\n\n        const center = tempVec3a;\n        center.copy(node.geometry.bounds.center);\n        center.applyMatrix4(worldMatrix);\n\n        const radius = node.geometry.bounds.radius * worldMatrix.getMaxScaleOnAxis();\n\n        return this.frustumIntersectsSphere(center, radius);\n    }\n\n    frustumIntersectsSphere(center, radius) {\n        const normal = tempVec3b;\n\n        for (let i = 0; i < 6; i++) {\n            const plane = this.frustum[i];\n            const distance = normal.copy(plane).dot(center) + plane.constant;\n            if (distance < -radius) return false;\n        }\n        return true;\n    }\n}\n", "const EPSILON = 0.000001;\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n}\n\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\nexport function fromQuat(out, q) {\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[3] = yx - wz;\n    out[6] = zx + wy;\n\n    out[1] = yx + wz;\n    out[4] = 1 - xx - zz;\n    out[7] = zy - wx;\n\n    out[2] = zx - wy;\n    out[5] = zy + wx;\n    out[8] = 1 - xx - yy;\n\n    return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        let a01 = a[1],\n            a02 = a[2],\n            a12 = a[5];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a01;\n        out[5] = a[7];\n        out[6] = a02;\n        out[7] = a12;\n    } else {\n        out[0] = a[0];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a[1];\n        out[4] = a[4];\n        out[5] = a[7];\n        out[6] = a[2];\n        out[7] = a[5];\n        out[8] = a[8];\n    }\n\n    return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function invert(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    let b01 = a22 * a11 - a12 * a21;\n    let b11 = -a22 * a10 + a12 * a20;\n    let b21 = a21 * a10 - a11 * a20;\n\n    // Calculate the determinant\n    let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    let b00 = b[0],\n        b01 = b[1],\n        b02 = b[2];\n    let b10 = b[3],\n        b11 = b[4],\n        b12 = b[5];\n    let b20 = b[6],\n        b21 = b[7],\n        b22 = b[8];\n\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a10 = a[3],\n        a11 = a[4],\n        a12 = a[5],\n        a20 = a[6],\n        a21 = a[7],\n        a22 = a[8],\n        x = v[0],\n        y = v[1];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a10 = a[3],\n        a11 = a[4],\n        a12 = a[5],\n        a20 = a[6],\n        a21 = a[7],\n        a22 = a[8],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n}\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v) {\n    let x = v[0],\n        y = v[1];\n\n    out[0] = x * a[0];\n    out[1] = x * a[1];\n    out[2] = x * a[2];\n\n    out[3] = y * a[3];\n    out[4] = y * a[4];\n    out[5] = y * a[5];\n\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n}\n\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {mat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\nexport function normalFromMat4(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n    return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height) {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    return out;\n}\n", "import * as Mat3Func from './functions/Mat3Func.js';\n\nexport class Mat3 extends Array {\n    constructor(m00 = 1, m01 = 0, m02 = 0, m10 = 0, m11 = 1, m12 = 0, m20 = 0, m21 = 0, m22 = 1) {\n        super(m00, m01, m02, m10, m11, m12, m20, m21, m22);\n        return this;\n    }\n\n    set(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n        if (m00.length) return this.copy(m00);\n        Mat3Func.set(this, m00, m01, m02, m10, m11, m12, m20, m21, m22);\n        return this;\n    }\n\n    translate(v, m = this) {\n        Mat3Func.translate(this, m, v);\n        return this;\n    }\n\n    rotate(v, m = this) {\n        Mat3Func.rotate(this, m, v);\n        return this;\n    }\n\n    scale(v, m = this) {\n        Mat3Func.scale(this, m, v);\n        return this;\n    }\n\n    multiply(ma, mb) {\n        if (mb) {\n            Mat3Func.multiply(this, ma, mb);\n        } else {\n            Mat3Func.multiply(this, this, ma);\n        }\n        return this;\n    }\n\n    identity() {\n        Mat3Func.identity(this);\n        return this;\n    }\n\n    copy(m) {\n        Mat3Func.copy(this, m);\n        return this;\n    }\n\n    fromMatrix4(m) {\n        Mat3Func.fromMat4(this, m);\n        return this;\n    }\n\n    fromQuaternion(q) {\n        Mat3Func.fromQuat(this, q);\n        return this;\n    }\n\n    fromBasis(vec3a, vec3b, vec3c) {\n        this.set(vec3a[0], vec3a[1], vec3a[2], vec3b[0], vec3b[1], vec3b[2], vec3c[0], vec3c[1], vec3c[2]);\n        return this;\n    }\n\n    inverse(m = this) {\n        Mat3Func.invert(this, m);\n        return this;\n    }\n\n    getNormalMatrix(m) {\n        Mat3Func.normalFromMat4(this, m);\n        return this;\n    }\n}\n", "import { Transform } from './Transform.js';\nimport { Mat3 } from '../math/Mat3.js';\nimport { Mat4 } from '../math/Mat4.js';\n\nlet ID = 0;\n\nexport class Mesh extends Transform {\n    constructor(gl, { geometry, program, mode = gl.TRIANGLES, frustumCulled = true, renderOrder = 0 } = {}) {\n        super();\n        if (!gl.canvas) console.error('gl not passed as first argument to Mesh');\n        this.gl = gl;\n        this.id = ID++;\n        this.geometry = geometry;\n        this.program = program;\n        this.mode = mode;\n\n        // Used to skip frustum culling\n        this.frustumCulled = frustumCulled;\n\n        // Override sorting to force an order\n        this.renderOrder = renderOrder;\n        this.modelViewMatrix = new Mat4();\n        this.normalMatrix = new Mat3();\n        this.beforeRenderCallbacks = [];\n        this.afterRenderCallbacks = [];\n    }\n\n    onBeforeRender(f) {\n        this.beforeRenderCallbacks.push(f);\n        return this;\n    }\n\n    onAfterRender(f) {\n        this.afterRenderCallbacks.push(f);\n        return this;\n    }\n\n    draw({ camera } = {}) {\n        if (camera) {\n            // Add empty matrix uniforms to program if unset\n            if (!this.program.uniforms.modelMatrix) {\n                Object.assign(this.program.uniforms, {\n                    modelMatrix: { value: null },\n                    viewMatrix: { value: null },\n                    modelViewMatrix: { value: null },\n                    normalMatrix: { value: null },\n                    projectionMatrix: { value: null },\n                    cameraPosition: { value: null },\n                });\n            }\n\n            // Set the matrix uniforms\n            this.program.uniforms.projectionMatrix.value = camera.projectionMatrix;\n            this.program.uniforms.cameraPosition.value = camera.worldPosition;\n            this.program.uniforms.viewMatrix.value = camera.viewMatrix;\n            this.modelViewMatrix.multiply(camera.viewMatrix, this.worldMatrix);\n            this.normalMatrix.getNormalMatrix(this.modelViewMatrix);\n            this.program.uniforms.modelMatrix.value = this.worldMatrix;\n            this.program.uniforms.modelViewMatrix.value = this.modelViewMatrix;\n            this.program.uniforms.normalMatrix.value = this.normalMatrix;\n        }\n        this.beforeRenderCallbacks.forEach((f) => f && f({ mesh: this, camera }));\n\n        // determine if faces need to be flipped - when mesh scaled negatively\n        let flipFaces = this.program.cullFace && this.worldMatrix.determinant() < 0;\n        this.program.use({ flipFaces });\n        this.geometry.draw({ mode: this.mode, program: this.program });\n        this.afterRenderCallbacks.forEach((f) => f && f({ mesh: this, camera }));\n    }\n}\n", "// TODO: delete texture\n// TODO: use texSubImage2D for updates (video or when loaded)\n// TODO: need? encoding = linearEncoding\n// TODO: support non-compressed mipmaps uploads\n\nconst emptyPixel = new Uint8Array(4);\n\nfunction isPowerOf2(value) {\n    return (value & (value - 1)) === 0;\n}\n\nlet ID = 1;\n\nexport class Texture {\n    constructor(\n        gl,\n        {\n            image,\n            target = gl.TEXTURE_2D,\n            type = gl.UNSIGNED_BYTE,\n            format = gl.RGBA,\n            internalFormat = format,\n            wrapS = gl.CLAMP_TO_EDGE,\n            wrapT = gl.CLAMP_TO_EDGE,\n            generateMipmaps = true,\n            minFilter = generateMipmaps ? gl.NEAREST_MIPMAP_LINEAR : gl.LINEAR,\n            magFilter = gl.LINEAR,\n            premultiplyAlpha = false,\n            unpackAlignment = 4,\n            flipY = target == gl.TEXTURE_2D ? true : false,\n            anisotropy = 0,\n            level = 0,\n            width, // used for RenderTargets or Data Textures\n            height = width,\n        } = {}\n    ) {\n        this.gl = gl;\n        this.id = ID++;\n\n        this.image = image;\n        this.target = target;\n        this.type = type;\n        this.format = format;\n        this.internalFormat = internalFormat;\n        this.minFilter = minFilter;\n        this.magFilter = magFilter;\n        this.wrapS = wrapS;\n        this.wrapT = wrapT;\n        this.generateMipmaps = generateMipmaps;\n        this.premultiplyAlpha = premultiplyAlpha;\n        this.unpackAlignment = unpackAlignment;\n        this.flipY = flipY;\n        this.anisotropy = Math.min(anisotropy, this.gl.renderer.parameters.maxAnisotropy);\n        this.level = level;\n        this.width = width;\n        this.height = height;\n        this.texture = this.gl.createTexture();\n\n        this.store = {\n            image: null,\n        };\n\n        // Alias for state store to avoid redundant calls for global state\n        this.glState = this.gl.renderer.state;\n\n        // State store to avoid redundant calls for per-texture state\n        this.state = {};\n        this.state.minFilter = this.gl.NEAREST_MIPMAP_LINEAR;\n        this.state.magFilter = this.gl.LINEAR;\n        this.state.wrapS = this.gl.REPEAT;\n        this.state.wrapT = this.gl.REPEAT;\n        this.state.anisotropy = 0;\n    }\n\n    bind() {\n        // Already bound to active texture unit\n        if (this.glState.textureUnits[this.glState.activeTextureUnit] === this.id) return;\n        this.gl.bindTexture(this.target, this.texture);\n        this.glState.textureUnits[this.glState.activeTextureUnit] = this.id;\n    }\n\n    update(textureUnit = 0) {\n        const needsUpdate = !(this.image === this.store.image && !this.needsUpdate);\n\n        // Make sure that texture is bound to its texture unit\n        if (needsUpdate || this.glState.textureUnits[textureUnit] !== this.id) {\n            // set active texture unit to perform texture functions\n            this.gl.renderer.activeTexture(textureUnit);\n            this.bind();\n        }\n\n        if (!needsUpdate) return;\n        this.needsUpdate = false;\n\n        if (this.flipY !== this.glState.flipY) {\n            this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, this.flipY);\n            this.glState.flipY = this.flipY;\n        }\n\n        if (this.premultiplyAlpha !== this.glState.premultiplyAlpha) {\n            this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);\n            this.glState.premultiplyAlpha = this.premultiplyAlpha;\n        }\n\n        if (this.unpackAlignment !== this.glState.unpackAlignment) {\n            this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT, this.unpackAlignment);\n            this.glState.unpackAlignment = this.unpackAlignment;\n        }\n\n        if (this.minFilter !== this.state.minFilter) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_MIN_FILTER, this.minFilter);\n            this.state.minFilter = this.minFilter;\n        }\n\n        if (this.magFilter !== this.state.magFilter) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_MAG_FILTER, this.magFilter);\n            this.state.magFilter = this.magFilter;\n        }\n\n        if (this.wrapS !== this.state.wrapS) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_S, this.wrapS);\n            this.state.wrapS = this.wrapS;\n        }\n\n        if (this.wrapT !== this.state.wrapT) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_T, this.wrapT);\n            this.state.wrapT = this.wrapT;\n        }\n\n        if (this.anisotropy && this.anisotropy !== this.state.anisotropy) {\n            this.gl.texParameterf(\n                this.target,\n                this.gl.renderer.getExtension('EXT_texture_filter_anisotropic').TEXTURE_MAX_ANISOTROPY_EXT,\n                this.anisotropy\n            );\n            this.state.anisotropy = this.anisotropy;\n        }\n\n        if (this.image) {\n            if (this.image.width) {\n                this.width = this.image.width;\n                this.height = this.image.height;\n            }\n\n            if (this.target === this.gl.TEXTURE_CUBE_MAP) {\n                // For cube maps\n                for (let i = 0; i < 6; i++) {\n                    this.gl.texImage2D(\n                        this.gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\n                        this.level,\n                        this.internalFormat,\n                        this.format,\n                        this.type,\n                        this.image[i]\n                    );\n                }\n            } else if (ArrayBuffer.isView(this.image)) {\n                // Data texture\n                this.gl.texImage2D(this.target, this.level, this.internalFormat, this.width, this.height, 0, this.format, this.type, this.image);\n            } else if (this.image.isCompressedTexture) {\n                // Compressed texture\n                for (let level = 0; level < this.image.length; level++) {\n                    this.gl.compressedTexImage2D(\n                        this.target,\n                        level,\n                        this.internalFormat,\n                        this.image[level].width,\n                        this.image[level].height,\n                        0,\n                        this.image[level].data\n                    );\n                }\n            } else {\n                // Regular texture\n                this.gl.texImage2D(this.target, this.level, this.internalFormat, this.format, this.type, this.image);\n            }\n\n            if (this.generateMipmaps) {\n                // For WebGL1, if not a power of 2, turn off mips, set wrapping to clamp to edge and minFilter to linear\n                if (!this.gl.renderer.isWebgl2 && (!isPowerOf2(this.image.width) || !isPowerOf2(this.image.height))) {\n                    this.generateMipmaps = false;\n                    this.wrapS = this.wrapT = this.gl.CLAMP_TO_EDGE;\n                    this.minFilter = this.gl.LINEAR;\n                } else {\n                    this.gl.generateMipmap(this.target);\n                }\n            }\n\n            // Callback for when data is pushed to GPU\n            this.onUpdate && this.onUpdate();\n        } else {\n            if (this.target === this.gl.TEXTURE_CUBE_MAP) {\n                // Upload empty pixel for each side while no image to avoid errors while image or video loading\n                for (let i = 0; i < 6; i++) {\n                    this.gl.texImage2D(\n                        this.gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\n                        0,\n                        this.gl.RGBA,\n                        1,\n                        1,\n                        0,\n                        this.gl.RGBA,\n                        this.gl.UNSIGNED_BYTE,\n                        emptyPixel\n                    );\n                }\n            } else if (this.width) {\n                // image intentionally left null for RenderTarget\n                this.gl.texImage2D(this.target, this.level, this.internalFormat, this.width, this.height, 0, this.format, this.type, null);\n            } else {\n                // Upload empty pixel if no image to avoid errors while image or video loading\n                this.gl.texImage2D(this.target, 0, this.gl.RGBA, 1, 1, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, emptyPixel);\n            }\n        }\n        this.store.image = this.image;\n    }\n}\n", "const EPSILON = 0.000001;\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n}\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nexport function set(out, x, y) {\n    out[0] = x;\n    out[1] = y;\n    return out;\n}\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    return out;\n}\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function multiply(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    return out;\n}\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function divide(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    return out;\n}\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nexport function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return Math.sqrt(x * x + y * y);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return x * x + y * y;\n}\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n    var x = a[0],\n        y = a[1];\n    return Math.sqrt(x * x + y * y);\n}\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n    var x = a[0],\n        y = a[1];\n    return x * x + y * y;\n}\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nexport function negate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    return out;\n}\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nexport function inverse(out, a) {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    return out;\n}\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nexport function normalize(out, a) {\n    var x = a[0],\n        y = a[1];\n    var len = x * x + y * y;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product returns a scalar\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} cross product of a and b\n */\nexport function cross(a, b) {\n    return a[0] * b[1] - a[1] * b[0];\n}\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec2} out\n */\nexport function lerp(out, a, b, t) {\n    var ax = a[0],\n        ay = a[1];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    return out;\n}\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y;\n    out[1] = m[1] * x + m[3] * y;\n    return out;\n}\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2d(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y + m[4];\n    out[1] = m[1] * x + m[3] * y + m[5];\n    return out;\n}\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat3(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[3] * y + m[6];\n    out[1] = m[1] * x + m[4] * y + m[7];\n    return out;\n}\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat4(out, a, m) {\n    let x = a[0];\n    let y = a[1];\n    out[0] = m[0] * x + m[4] * y + m[12];\n    out[1] = m[1] * x + m[5] * y + m[13];\n    return out;\n}\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1];\n}\n", "import * as Vec2Func from './functions/Vec2Func.js';\n\nexport class Vec2 extends Array {\n    constructor(x = 0, y = x) {\n        super(x, y);\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    set x(v) {\n        this[0] = v;\n    }\n\n    set y(v) {\n        this[1] = v;\n    }\n\n    set(x, y = x) {\n        if (x.length) return this.copy(x);\n        Vec2Func.set(this, x, y);\n        return this;\n    }\n\n    copy(v) {\n        Vec2Func.copy(this, v);\n        return this;\n    }\n\n    add(va, vb) {\n        if (vb) Vec2Func.add(this, va, vb);\n        else Vec2Func.add(this, this, va);\n        return this;\n    }\n\n    sub(va, vb) {\n        if (vb) Vec2Func.subtract(this, va, vb);\n        else Vec2Func.subtract(this, this, va);\n        return this;\n    }\n\n    multiply(v) {\n        if (v.length) Vec2Func.multiply(this, this, v);\n        else Vec2Func.scale(this, this, v);\n        return this;\n    }\n\n    divide(v) {\n        if (v.length) Vec2Func.divide(this, this, v);\n        else Vec2Func.scale(this, this, 1 / v);\n        return this;\n    }\n\n    inverse(v = this) {\n        Vec2Func.inverse(this, v);\n        return this;\n    }\n\n    // Can't use 'length' as Array.prototype uses it\n    len() {\n        return Vec2Func.length(this);\n    }\n\n    distance(v) {\n        if (v) return Vec2Func.distance(this, v);\n        else return Vec2Func.length(this);\n    }\n\n    squaredLen() {\n        return this.squaredDistance();\n    }\n\n    squaredDistance(v) {\n        if (v) return Vec2Func.squaredDistance(this, v);\n        else return Vec2Func.squaredLength(this);\n    }\n\n    negate(v = this) {\n        Vec2Func.negate(this, v);\n        return this;\n    }\n\n    cross(va, vb) {\n        if (vb) return Vec2Func.cross(va, vb);\n        return Vec2Func.cross(this, va);\n    }\n\n    scale(v) {\n        Vec2Func.scale(this, this, v);\n        return this;\n    }\n\n    normalize() {\n        Vec2Func.normalize(this, this);\n        return this;\n    }\n\n    dot(v) {\n        return Vec2Func.dot(this, v);\n    }\n\n    equals(v) {\n        return Vec2Func.exactEquals(this, v);\n    }\n\n    applyMatrix3(mat3) {\n        Vec2Func.transformMat3(this, this, mat3);\n        return this;\n    }\n\n    applyMatrix4(mat4) {\n        Vec2Func.transformMat4(this, this, mat4);\n        return this;\n    }\n\n    lerp(v, a) {\n        Vec2Func.lerp(this, this, v, a);\n        return this;\n    }\n\n    clone() {\n        return new Vec2(this[0], this[1]);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        return a;\n    }\n}\n", "import * as Vec4Func from './functions/Vec4Func.js';\n\nexport class Vec4 extends Array {\n    constructor(x = 0, y = x, z = x, w = x) {\n        super(x, y, z, w);\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    get w() {\n        return this[3];\n    }\n\n    set x(v) {\n        this[0] = v;\n    }\n\n    set y(v) {\n        this[1] = v;\n    }\n\n    set z(v) {\n        this[2] = v;\n    }\n\n    set w(v) {\n        this[3] = v;\n    }\n\n    set(x, y = x, z = x, w = x) {\n        if (x.length) return this.copy(x);\n        Vec4Func.set(this, x, y, z, w);\n        return this;\n    }\n\n    copy(v) {\n        Vec4Func.copy(this, v);\n        return this;\n    }\n\n    normalize() {\n        Vec4Func.normalize(this, this);\n        return this;\n    }\n\n    multiply(v) {\n        Vec4Func.scale(this, this, v);\n        return this;\n    }\n\n    dot(v) {\n        return Vec4Func.dot(this, v);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        this[3] = a[o + 3];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        return a;\n    }\n}\n", "// Based from ThreeJS' OrbitControls class, rewritten using es6 with some additions and subtractions.\n// TODO: abstract event handlers so can be fed from other sources\n// TODO: make scroll zoom more accurate than just >/< zero\n// TODO: be able to pass in new camera position\n\nimport { Vec3 } from '../math/Vec3.js';\nimport { Vec2 } from '../math/Vec2.js';\n\nconst STATE = { NONE: -1, ROTATE: 0, DOLLY: 1, PAN: 2, DOLLY_PAN: 3 };\nconst tempVec3 = new Vec3();\nconst tempVec2a = new Vec2();\nconst tempVec2b = new Vec2();\n\nexport function Orbit(\n    object,\n    {\n        element = document,\n        enabled = true,\n        target = new Vec3(),\n        ease = 0.25,\n        inertia = 0.85,\n        enableRotate = true,\n        rotateSpeed = 0.1,\n        autoRotate = false,\n        autoRotateSpeed = 1.0,\n        enableZoom = true,\n        zoomSpeed = 1,\n        zoomStyle = 'dolly',\n        enablePan = true,\n        panSpeed = 0.1,\n        minPolarAngle = 0,\n        maxPolarAngle = Math.PI,\n        minAzimuthAngle = -Infinity,\n        maxAzimuthAngle = Infinity,\n        minDistance = 0,\n        maxDistance = Infinity,\n    } = {}\n) {\n    this.enabled = enabled;\n    this.target = target;\n    this.zoomStyle = zoomStyle;\n\n    // Catch attempts to disable - set to 1 so has no effect\n    ease = ease || 1;\n    inertia = inertia || 0;\n\n    this.minDistance = minDistance;\n    this.maxDistance = maxDistance;\n\n    // current position in sphericalTarget coordinates\n    const sphericalDelta = { radius: 1, phi: 0, theta: 0 };\n    const sphericalTarget = { radius: 1, phi: 0, theta: 0 };\n    const spherical = { radius: 1, phi: 0, theta: 0 };\n    const panDelta = new Vec3();\n\n    // Grab initial position values\n    const offset = new Vec3();\n    offset.copy(object.position).sub(this.target);\n    spherical.radius = sphericalTarget.radius = offset.distance();\n    spherical.theta = sphericalTarget.theta = Math.atan2(offset.x, offset.z);\n    spherical.phi = sphericalTarget.phi = Math.acos(Math.min(Math.max(offset.y / sphericalTarget.radius, -1), 1));\n\n    this.offset = offset;\n\n    this.update = () => {\n        if (autoRotate) {\n            handleAutoRotate();\n        }\n\n        // apply delta\n        sphericalTarget.radius *= sphericalDelta.radius;\n        sphericalTarget.theta += sphericalDelta.theta;\n        sphericalTarget.phi += sphericalDelta.phi;\n\n        // apply boundaries\n        sphericalTarget.theta = Math.max(minAzimuthAngle, Math.min(maxAzimuthAngle, sphericalTarget.theta));\n        sphericalTarget.phi = Math.max(minPolarAngle, Math.min(maxPolarAngle, sphericalTarget.phi));\n        sphericalTarget.radius = Math.max(this.minDistance, Math.min(this.maxDistance, sphericalTarget.radius));\n\n        // ease values\n        spherical.phi += (sphericalTarget.phi - spherical.phi) * ease;\n        spherical.theta += (sphericalTarget.theta - spherical.theta) * ease;\n        spherical.radius += (sphericalTarget.radius - spherical.radius) * ease;\n\n        // apply pan to target. As offset is relative to target, it also shifts\n        this.target.add(panDelta);\n\n        // apply rotation to offset\n        let sinPhiRadius = spherical.radius * Math.sin(Math.max(0.000001, spherical.phi));\n        offset.x = sinPhiRadius * Math.sin(spherical.theta);\n        offset.y = spherical.radius * Math.cos(spherical.phi);\n        offset.z = sinPhiRadius * Math.cos(spherical.theta);\n\n        // Apply updated values to object\n        object.position.copy(this.target).add(offset);\n        object.lookAt(this.target);\n\n        // Apply inertia to values\n        sphericalDelta.theta *= inertia;\n        sphericalDelta.phi *= inertia;\n        panDelta.multiply(inertia);\n\n        // Reset scale every frame to avoid applying scale multiple times\n        sphericalDelta.radius = 1;\n    };\n\n    // Updates internals with new position\n    this.forcePosition = () => {\n        offset.copy(object.position).sub(this.target);\n        spherical.radius = sphericalTarget.radius = offset.distance();\n        spherical.theta = sphericalTarget.theta = Math.atan2(offset.x, offset.z);\n        spherical.phi = sphericalTarget.phi = Math.acos(Math.min(Math.max(offset.y / sphericalTarget.radius, -1), 1));\n        object.lookAt(this.target);\n    };\n\n    // Everything below here just updates panDelta and sphericalDelta\n    // Using those two objects' values, the orbit is calculated\n\n    const rotateStart = new Vec2();\n    const panStart = new Vec2();\n    const dollyStart = new Vec2();\n\n    let state = STATE.NONE;\n    this.mouseButtons = { ORBIT: 0, ZOOM: 1, PAN: 2 };\n\n    function getZoomScale() {\n        return Math.pow(0.95, zoomSpeed);\n    }\n\n    function panLeft(distance, m) {\n        tempVec3.set(m[0], m[1], m[2]);\n        tempVec3.multiply(-distance);\n        panDelta.add(tempVec3);\n    }\n\n    function panUp(distance, m) {\n        tempVec3.set(m[4], m[5], m[6]);\n        tempVec3.multiply(distance);\n        panDelta.add(tempVec3);\n    }\n\n    const pan = (deltaX, deltaY) => {\n        let el = element === document ? document.body : element;\n        tempVec3.copy(object.position).sub(this.target);\n        let targetDistance = tempVec3.distance();\n        targetDistance *= Math.tan((((object.fov || 45) / 2) * Math.PI) / 180.0);\n        panLeft((2 * deltaX * targetDistance) / el.clientHeight, object.matrix);\n        panUp((2 * deltaY * targetDistance) / el.clientHeight, object.matrix);\n    };\n\n    const dolly = (dollyScale) => {\n        if (this.zoomStyle === 'dolly') sphericalDelta.radius /= dollyScale;\n        else {\n            object.fov /= dollyScale;\n            if (object.type === 'orthographic') object.orthographic();\n            else object.perspective();\n        }\n    };\n\n    function handleAutoRotate() {\n        const angle = ((2 * Math.PI) / 60 / 60) * autoRotateSpeed;\n        sphericalDelta.theta -= angle;\n    }\n\n    function handleMoveRotate(x, y) {\n        tempVec2a.set(x, y);\n        tempVec2b.sub(tempVec2a, rotateStart).multiply(rotateSpeed);\n        let el = element === document ? document.body : element;\n        sphericalDelta.theta -= (2 * Math.PI * tempVec2b.x) / el.clientHeight;\n        sphericalDelta.phi -= (2 * Math.PI * tempVec2b.y) / el.clientHeight;\n        rotateStart.copy(tempVec2a);\n    }\n\n    function handleMouseMoveDolly(e) {\n        tempVec2a.set(e.clientX, e.clientY);\n        tempVec2b.sub(tempVec2a, dollyStart);\n        if (tempVec2b.y > 0) {\n            dolly(getZoomScale());\n        } else if (tempVec2b.y < 0) {\n            dolly(1 / getZoomScale());\n        }\n        dollyStart.copy(tempVec2a);\n    }\n\n    function handleMovePan(x, y) {\n        tempVec2a.set(x, y);\n        tempVec2b.sub(tempVec2a, panStart).multiply(panSpeed);\n        pan(tempVec2b.x, tempVec2b.y);\n        panStart.copy(tempVec2a);\n    }\n\n    function handleTouchStartDollyPan(e) {\n        if (enableZoom) {\n            let dx = e.touches[0].pageX - e.touches[1].pageX;\n            let dy = e.touches[0].pageY - e.touches[1].pageY;\n            let distance = Math.sqrt(dx * dx + dy * dy);\n            dollyStart.set(0, distance);\n        }\n\n        if (enablePan) {\n            let x = 0.5 * (e.touches[0].pageX + e.touches[1].pageX);\n            let y = 0.5 * (e.touches[0].pageY + e.touches[1].pageY);\n            panStart.set(x, y);\n        }\n    }\n\n    function handleTouchMoveDollyPan(e) {\n        if (enableZoom) {\n            let dx = e.touches[0].pageX - e.touches[1].pageX;\n            let dy = e.touches[0].pageY - e.touches[1].pageY;\n            let distance = Math.sqrt(dx * dx + dy * dy);\n            tempVec2a.set(0, distance);\n            tempVec2b.set(0, Math.pow(tempVec2a.y / dollyStart.y, zoomSpeed));\n            dolly(tempVec2b.y);\n            dollyStart.copy(tempVec2a);\n        }\n\n        if (enablePan) {\n            let x = 0.5 * (e.touches[0].pageX + e.touches[1].pageX);\n            let y = 0.5 * (e.touches[0].pageY + e.touches[1].pageY);\n            handleMovePan(x, y);\n        }\n    }\n\n    const onMouseDown = (e) => {\n        if (!this.enabled) return;\n\n        switch (e.button) {\n            case this.mouseButtons.ORBIT:\n                if (enableRotate === false) return;\n                rotateStart.set(e.clientX, e.clientY);\n                state = STATE.ROTATE;\n                break;\n            case this.mouseButtons.ZOOM:\n                if (enableZoom === false) return;\n                dollyStart.set(e.clientX, e.clientY);\n                state = STATE.DOLLY;\n                break;\n            case this.mouseButtons.PAN:\n                if (enablePan === false) return;\n                panStart.set(e.clientX, e.clientY);\n                state = STATE.PAN;\n                break;\n        }\n\n        if (state !== STATE.NONE) {\n            window.addEventListener('mousemove', onMouseMove, false);\n            window.addEventListener('mouseup', onMouseUp, false);\n        }\n    };\n\n    const onMouseMove = (e) => {\n        if (!this.enabled) return;\n\n        switch (state) {\n            case STATE.ROTATE:\n                if (enableRotate === false) return;\n                handleMoveRotate(e.clientX, e.clientY);\n                break;\n            case STATE.DOLLY:\n                if (enableZoom === false) return;\n                handleMouseMoveDolly(e);\n                break;\n            case STATE.PAN:\n                if (enablePan === false) return;\n                handleMovePan(e.clientX, e.clientY);\n                break;\n        }\n    };\n\n    const onMouseUp = () => {\n        window.removeEventListener('mousemove', onMouseMove, false);\n        window.removeEventListener('mouseup', onMouseUp, false);\n        state = STATE.NONE;\n    };\n\n    const onMouseWheel = (e) => {\n        if (!this.enabled || !enableZoom || (state !== STATE.NONE && state !== STATE.ROTATE)) return;\n        e.stopPropagation();\n        e.preventDefault();\n\n        if (e.deltaY < 0) {\n            dolly(1 / getZoomScale());\n        } else if (e.deltaY > 0) {\n            dolly(getZoomScale());\n        }\n    };\n\n    const onTouchStart = (e) => {\n        if (!this.enabled) return;\n        e.preventDefault();\n\n        switch (e.touches.length) {\n            case 1:\n                if (enableRotate === false) return;\n                rotateStart.set(e.touches[0].pageX, e.touches[0].pageY);\n                state = STATE.ROTATE;\n                break;\n            case 2:\n                if (enableZoom === false && enablePan === false) return;\n                handleTouchStartDollyPan(e);\n                state = STATE.DOLLY_PAN;\n                break;\n            default:\n                state = STATE.NONE;\n        }\n    };\n\n    const onTouchMove = (e) => {\n        if (!this.enabled) return;\n        e.preventDefault();\n        e.stopPropagation();\n\n        switch (e.touches.length) {\n            case 1:\n                if (enableRotate === false) return;\n                handleMoveRotate(e.touches[0].pageX, e.touches[0].pageY);\n                break;\n            case 2:\n                if (enableZoom === false && enablePan === false) return;\n                handleTouchMoveDollyPan(e);\n                break;\n            default:\n                state = STATE.NONE;\n        }\n    };\n\n    const onTouchEnd = () => {\n        if (!this.enabled) return;\n        state = STATE.NONE;\n    };\n\n    const onContextMenu = (e) => {\n        if (!this.enabled) return;\n        e.preventDefault();\n    };\n\n    function addHandlers() {\n        element.addEventListener('contextmenu', onContextMenu, false);\n        element.addEventListener('mousedown', onMouseDown, false);\n        element.addEventListener('wheel', onMouseWheel, { passive: false });\n        element.addEventListener('touchstart', onTouchStart, { passive: false });\n        element.addEventListener('touchend', onTouchEnd, false);\n        element.addEventListener('touchmove', onTouchMove, { passive: false });\n    }\n\n    this.remove = function () {\n        element.removeEventListener('contextmenu', onContextMenu);\n        element.removeEventListener('mousedown', onMouseDown);\n        element.removeEventListener('wheel', onMouseWheel);\n        element.removeEventListener('touchstart', onTouchStart);\n        element.removeEventListener('touchend', onTouchEnd);\n        element.removeEventListener('touchmove', onTouchMove);\n        window.removeEventListener('mousemove', onMouseMove);\n        window.removeEventListener('mouseup', onMouseUp);\n    };\n\n    addHandlers();\n}\n", "import { Program } from '../core/Program.js';\n\nconst vertex = /* glsl */ `\n    precision highp float;\n    precision highp int;\n\n    attribute vec3 position;\n    attribute vec3 normal;\n\n    uniform mat3 normalMatrix;\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n\n    varying vec3 vNormal;\n\n    void main() {\n        vNormal = normalize(normalMatrix * normal);\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n`;\n\nconst fragment = /* glsl */ `\n    precision highp float;\n    precision highp int;\n\n    varying vec3 vNormal;\n\n    void main() {\n        gl_FragColor.rgb = normalize(vNormal);\n        gl_FragColor.a = 1.0;\n    }\n`;\n\nexport function NormalProgram(gl) {\n    return new Program(gl, {\n        vertex: vertex,\n        fragment: fragment,\n        cullFace: null,\n    });\n}\n", "import { Vec3 } from '../math/Vec3.js';\nimport { Quat } from '../math/Quat.js';\n\nconst tmpVec3A = new Vec3();\nconst tmpVec3B = new Vec3();\nconst tmpVec3C = new Vec3();\nconst tmpVec3D = new Vec3();\n\nconst tmpQuatA = new Quat();\nconst tmpQuatB = new Quat();\nconst tmpQuatC = new Quat();\nconst tmpQuatD = new Quat();\n\nexport class GLTFAnimation {\n    constructor(data, weight = 1) {\n        this.data = data;\n        this.elapsed = 0;\n        this.weight = weight;\n\n        // Set to false to not apply modulo to elapsed against duration\n        this.loop = true;\n\n        // Find starting time as exports from blender (perhaps others too) don't always start from 0\n        this.startTime = data.reduce((a, { times }) => Math.min(a, times[0]), Infinity);\n        // Get largest final time in all channels to calculate duration\n        this.endTime = data.reduce((a, { times }) => Math.max(a, times[times.length - 1]), 0);\n        this.duration = this.endTime - this.startTime;\n    }\n\n    update(totalWeight = 1, isSet) {\n        const weight = isSet ? 1 : this.weight / totalWeight;\n        const elapsed = !this.duration\n            ? 0\n            : (this.loop ? this.elapsed % this.duration : Math.min(this.elapsed, this.duration - 0.001)) + this.startTime;\n\n        this.data.forEach(({ node, transform, interpolation, times, values }) => {\n            if (!this.duration) {\n                let val = tmpVec3A;\n                let size = 3;\n                if (transform === 'quaternion') {\n                    val = tmpQuatA;\n                    size = 4;\n                }\n                val.fromArray(values, 0);\n                if (size === 4) node[transform].slerp(val, weight);\n                else node[transform].lerp(val, weight);\n                return;\n            }\n\n            // Get index of two time values elapsed is between\n            const prevIndex =\n                Math.max(\n                    1,\n                    times.findIndex((t) => t > elapsed)\n                ) - 1;\n            const nextIndex = prevIndex + 1;\n\n            // Get linear blend/alpha between the two\n            let alpha = (elapsed - times[prevIndex]) / (times[nextIndex] - times[prevIndex]);\n            if (interpolation === 'STEP') alpha = 0;\n\n            let prevVal = tmpVec3A;\n            let prevTan = tmpVec3B;\n            let nextTan = tmpVec3C;\n            let nextVal = tmpVec3D;\n            let size = 3;\n\n            if (transform === 'quaternion') {\n                prevVal = tmpQuatA;\n                prevTan = tmpQuatB;\n                nextTan = tmpQuatC;\n                nextVal = tmpQuatD;\n                size = 4;\n            }\n\n            if (interpolation === 'CUBICSPLINE') {\n                // Get the prev and next values from the indices\n                prevVal.fromArray(values, prevIndex * size * 3 + size * 1);\n                prevTan.fromArray(values, prevIndex * size * 3 + size * 2);\n                nextTan.fromArray(values, nextIndex * size * 3 + size * 0);\n                nextVal.fromArray(values, nextIndex * size * 3 + size * 1);\n\n                // interpolate for final value\n                prevVal = this.cubicSplineInterpolate(alpha, prevVal, prevTan, nextTan, nextVal);\n                if (size === 4) prevVal.normalize();\n            } else {\n                // Get the prev and next values from the indices\n                prevVal.fromArray(values, prevIndex * size);\n                nextVal.fromArray(values, nextIndex * size);\n\n                // interpolate for final value\n                if (size === 4) prevVal.slerp(nextVal, alpha);\n                else prevVal.lerp(nextVal, alpha);\n            }\n\n            // interpolate between multiple possible animations\n            if (size === 4) node[transform].slerp(prevVal, weight);\n            else node[transform].lerp(prevVal, weight);\n        });\n    }\n\n    cubicSplineInterpolate(t, prevVal, prevTan, nextTan, nextVal) {\n        const t2 = t * t;\n        const t3 = t2 * t;\n\n        const s2 = 3 * t2 - 2 * t3;\n        const s3 = t3 - t2;\n        const s0 = 1 - s2;\n        const s1 = s3 - t2 + t;\n\n        for (let i = 0; i < prevVal.length; i++) {\n            prevVal[i] = s0 * prevVal[i] + s1 * (1 - t) * prevTan[i] + s2 * nextVal[i] + s3 * t * nextTan[i];\n        }\n\n        return prevVal;\n    }\n}\n", "import { Mesh } from '../core/Mesh.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { Texture } from '../core/Texture.js';\n\nconst tempMat4 = new Mat4();\nconst identity = new Mat4();\n\nexport class GLTFSkin extends Mesh {\n    constructor(gl, { skeleton, geometry, program, mode = gl.TRIANGLES } = {}) {\n        super(gl, { geometry, program, mode });\n        this.skeleton = skeleton;\n        this.program = program;\n        this.createBoneTexture();\n        // this.animations = [];\n    }\n\n    createBoneTexture() {\n        if (!this.skeleton.joints.length) return;\n        const size = Math.max(4, Math.pow(2, Math.ceil(Math.log(Math.sqrt(this.skeleton.joints.length * 4)) / Math.LN2)));\n        this.boneMatrices = new Float32Array(size * size * 4);\n        this.boneTextureSize = size;\n        this.boneTexture = new Texture(this.gl, {\n            image: this.boneMatrices,\n            generateMipmaps: false,\n            type: this.gl.FLOAT,\n            internalFormat: this.gl.renderer.isWebgl2 ? this.gl.RGBA32F : this.gl.RGBA,\n            minFilter: this.gl.NEAREST,\n            magFilter: this.gl.NEAREST,\n            flipY: false,\n            width: size,\n        });\n    }\n\n    // addAnimation(data) {\n    //     const animation = new Animation({ objects: this.bones, data });\n    //     this.animations.push(animation);\n    //     return animation;\n    // }\n\n    // updateAnimations() {\n    //     // Calculate combined animation weight\n    //     let total = 0;\n    //     this.animations.forEach((animation) => (total += animation.weight));\n\n    //     this.animations.forEach((animation, i) => {\n    //         // force first animation to set in order to reset frame\n    //         animation.update(total, i === 0);\n    //     });\n    // }\n\n    updateUniforms() {\n        // Update bone texture\n        this.skeleton.joints.forEach((bone, i) => {\n            // Find difference between current and bind pose\n            tempMat4.multiply(bone.worldMatrix, bone.bindInverse);\n            this.boneMatrices.set(tempMat4, i * 16);\n        });\n        if (this.boneTexture) this.boneTexture.needsUpdate = true;\n    }\n\n    draw({ camera } = {}) {\n        if (!this.program.uniforms.boneTexture) {\n            Object.assign(this.program.uniforms, {\n                boneTexture: { value: this.boneTexture },\n                boneTextureSize: { value: this.boneTextureSize },\n            });\n        }\n\n        this.updateUniforms();\n\n        // Switch the world matrix with identity to ignore any transforms\n        // on the mesh itself - only use skeleton's transforms\n        const _worldMatrix = this.worldMatrix;\n        this.worldMatrix = identity;\n\n        super.draw({ camera });\n\n        // Switch back to leave identity untouched\n        this.worldMatrix = _worldMatrix;\n    }\n}\n", "import { Transform } from '../core/Transform.js';\nimport { Mesh } from '../core/Mesh.js';\nimport { Vec4 } from '../math/Vec4.js';\n\nexport class InstancedMesh extends Mesh {\n    constructor(...args) {\n        super(...args);\n\n        // Skip renderer frustum culling\n        this.frustumCulled = false;\n        this.isInstancedMesh = true;\n    }\n\n    addFrustumCull() {\n        this.instanceTransforms = null;\n        this.instanceLightmapScaleOffset = null;\n        this.totalInstanceCount = 0;\n        this.frustumCullFunction = null;\n        this.instanceRenderList = null;\n\n        // Get instanced mesh\n        if (!this.geometry.attributes.instanceMatrix)\n            console.error(`mesh ${this.name ? `\"${this.name}\" ` : ``}missing instanceMatrix attribute; unable to frustum cull`);\n\n        // Make list of transforms from instanceMatrix\n        const matrixData = this.geometry.attributes.instanceMatrix.data;\n        this.instanceTransforms = [];\n        for (let i = 0, j = 0; i < matrixData.length; i += 16, j++) {\n            const transform = new Transform();\n            transform.index = j;\n            transform.matrix.fromArray(matrixData, i);\n            transform.decompose();\n            this.instanceTransforms.push(transform);\n            // Add transforms to parent to update world matrices\n            transform.setParent(this.parent);\n        }\n        this.totalInstanceCount = this.instanceTransforms.length;\n\n        // Check for lightmap attributes - attach to transform\n        if (!!this.geometry.attributes.lightmapScaleOffset) {\n            const lightmapData = this.geometry.attributes.lightmapScaleOffset.data;\n            for (let i = 0, j = 0; i < lightmapData.length; i += 4, j++) {\n                this.instanceTransforms[j].lightmapData = new Vec4().fromArray(lightmapData, i);\n            }\n        }\n\n        this.frustumCullFunction = ({ camera }) => {\n            // frustum cull transforms each frame - pass world matrix\n            this.instanceRenderList = [];\n            this.instanceTransforms.forEach((transform) => {\n                if (!camera.frustumIntersectsMesh(this, transform.worldMatrix)) return;\n                this.instanceRenderList.push(transform);\n            });\n\n            // update instanceMatrix and instancedCount with visible\n            this.instanceRenderList.forEach((transform, i) => {\n                transform.matrix.toArray(this.geometry.attributes.instanceMatrix.data, i * 16);\n                \n                // Update lightmap attr\n                if (transform.lightmapData) {\n                    transform.lightmapData.toArray(this.geometry.attributes.lightmapScaleOffset.data, i * 4);\n                    this.geometry.attributes.lightmapScaleOffset.needsUpdate = true;\n                }\n            });\n            this.geometry.instancedCount = this.instanceRenderList.length;\n            this.geometry.attributes.instanceMatrix.needsUpdate = true;\n        };\n\n        this.onBeforeRender(this.frustumCullFunction);\n    }\n\n    removeFrustumCull() {\n        this.offBeforeRender(this.frustumCullFunction);\n        this.geometry.instancedCount = this.totalInstanceCount;\n        this.instanceTransforms.forEach((transform, i) => {\n            transform.matrix.toArray(this.geometry.attributes.instanceMatrix.data, i * 16);\n\n            // Update lightmap attr\n            if (transform.lightmapData) {\n                transform.lightmapData.toArray(this.geometry.attributes.lightmapScaleOffset.data, i * 4);\n                this.geometry.attributes.lightmapScaleOffset.needsUpdate = true;\n            }\n        });\n        this.geometry.attributes.instanceMatrix.needsUpdate = true;\n    }\n}\n", "import { Geometry } from '../core/Geometry.js';\nimport { Transform } from '../core/Transform.js';\nimport { Texture } from '../core/Texture.js';\nimport { Mesh } from '../core/Mesh.js';\nimport { GLTFAnimation } from './GLTFAnimation.js';\nimport { GLTFSkin } from './GLTFSkin.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { Vec3 } from '../math/Vec3.js';\nimport { NormalProgram } from './NormalProgram.js';\nimport { InstancedMesh } from './InstancedMesh.js';\n\n// Supports\n// [x] glb\n// [x] Geometry\n// [x] Nodes and Hierarchy\n// [x] Instancing\n// [x] Skins\n// [x] Textures\n// [x] Animation\n// [x] GLB support\n// [x] Basis/ktx2\n// [x] KHR_lights_punctual lights\n// [ ] Morph Targets\n// [ ] Materials\n// [ ] Cameras\n\n// TODO: Sparse accessor packing? For morph targets basically\n// TODO: init accessor missing bufferView with 0s\n// TODO: morph target animations\n// TODO: option to turn off GPU instancing\n\nconst TYPE_ARRAY = {\n    5121: Uint8Array,\n    5122: Int16Array,\n    5123: Uint16Array,\n    5125: Uint32Array,\n    5126: Float32Array,\n    'image/jpeg': Uint8Array,\n    'image/png': Uint8Array,\n};\n\nconst TYPE_SIZE = {\n    SCALAR: 1,\n    VEC2: 2,\n    VEC3: 3,\n    VEC4: 4,\n    MAT2: 4,\n    MAT3: 9,\n    MAT4: 16,\n};\n\nconst ATTRIBUTES = {\n    POSITION: 'position',\n    NORMAL: 'normal',\n    TANGENT: 'tangent',\n    TEXCOORD_0: 'uv',\n    TEXCOORD_1: 'uv2',\n    COLOR_0: 'color',\n    WEIGHTS_0: 'skinWeight',\n    JOINTS_0: 'skinIndex',\n};\n\nconst TRANSFORMS = {\n    translation: 'position',\n    rotation: 'quaternion',\n    scale: 'scale',\n};\n\nexport class GLTFLoader {\n    static setBasisManager(manager) {\n        this.basisManager = manager;\n    }\n\n    static async load(gl, src) {\n        const dir = src.split('/').slice(0, -1).join('/') + '/';\n\n        // load main description json\n        const desc = await this.parseDesc(src);\n\n        return await this.parse(gl, desc, dir);\n    }\n\n    static async parse(gl, desc, dir) {\n        if (desc.asset === undefined || desc.asset.version[0] < 2) console.warn('Only GLTF >=2.0 supported. Attempting to parse.');\n\n        if (desc.extensionsRequired?.includes('KHR_texture_basisu') && !this.basisManager)\n            console.warn('KHR_texture_basisu extension required but no manager supplied. Use .setBasisManager()');\n\n        // Load buffers async\n        const buffers = await this.loadBuffers(desc, dir);\n\n        // Unbind current VAO so that new buffers don't get added to active mesh\n        gl.renderer.bindVertexArray(null);\n\n        // Create gl buffers from bufferViews\n        const bufferViews = this.parseBufferViews(gl, desc, buffers);\n\n        // Create images from either bufferViews or separate image files\n        const images = await this.parseImages(gl, desc, dir, bufferViews);\n\n        const textures = this.parseTextures(gl, desc, images);\n\n        // Just pass through material data for now\n        const materials = this.parseMaterials(gl, desc, textures);\n\n        // Fetch the inverse bind matrices for skeleton joints\n        const skins = this.parseSkins(gl, desc, bufferViews);\n\n        // Create geometries for each mesh primitive\n        const meshes = this.parseMeshes(gl, desc, bufferViews, materials, skins);\n\n        // Create transforms, meshes and hierarchy\n        const nodes = this.parseNodes(gl, desc, meshes, skins, images);\n\n        // Place nodes in skeletons\n        this.populateSkins(skins, nodes);\n\n        // Create animation handlers\n        const animations = this.parseAnimations(gl, desc, nodes, bufferViews);\n\n        // Get top level nodes for each scene\n        const scenes = this.parseScenes(desc, nodes);\n        const scene = scenes[desc.scene];\n\n        // Create uniforms for scene lights (TODO: light linking?)\n        const lights = this.parseLights(gl, desc, nodes, scenes);\n\n        // Remove null nodes (instanced transforms)\n        for (let i = nodes.length; i >= 0; i--) if (!nodes[i]) nodes.splice(i, 1);\n\n        return {\n            json: desc,\n            buffers,\n            bufferViews,\n            images,\n            textures,\n            materials,\n            meshes,\n            nodes,\n            lights,\n            animations,\n            scenes,\n            scene,\n        };\n    }\n\n    static async parseDesc(src) {\n        if (!src.match(/\\.glb/)) {\n            return await fetch(src).then((res) => res.json());\n        } else {\n            return await fetch(src)\n                .then((res) => res.arrayBuffer())\n                .then((glb) => this.unpackGLB(glb));\n        }\n    }\n\n    // From https://github.com/donmccurdy/glTF-Transform/blob/e4108cc/packages/core/src/io/io.ts#L32\n    static unpackGLB(glb) {\n        // Decode and verify GLB header.\n        const header = new Uint32Array(glb, 0, 3);\n        if (header[0] !== 0x46546c67) {\n            throw new Error('Invalid glTF asset.');\n        } else if (header[1] !== 2) {\n            throw new Error(`Unsupported glTF binary version, \"${header[1]}\".`);\n        }\n        // Decode and verify chunk headers.\n        const jsonChunkHeader = new Uint32Array(glb, 12, 2);\n        const jsonByteOffset = 20;\n        const jsonByteLength = jsonChunkHeader[0];\n        if (jsonChunkHeader[1] !== 0x4e4f534a) {\n            throw new Error('Unexpected GLB layout.');\n        }\n\n        // Decode JSON.\n        const jsonText = new TextDecoder().decode(glb.slice(jsonByteOffset, jsonByteOffset + jsonByteLength));\n        const json = JSON.parse(jsonText);\n        // JSON only\n        if (jsonByteOffset + jsonByteLength === glb.byteLength) return json;\n\n        const binaryChunkHeader = new Uint32Array(glb, jsonByteOffset + jsonByteLength, 2);\n        if (binaryChunkHeader[1] !== 0x004e4942) {\n            throw new Error('Unexpected GLB layout.');\n        }\n        // Decode content.\n        const binaryByteOffset = jsonByteOffset + jsonByteLength + 8;\n        const binaryByteLength = binaryChunkHeader[0];\n        const binary = glb.slice(binaryByteOffset, binaryByteOffset + binaryByteLength);\n        // Attach binary to buffer\n        json.buffers[0].binary = binary;\n        return json;\n    }\n\n    // Threejs GLTF Loader https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/GLTFLoader.js#L1085\n    static resolveURI(uri, dir) {\n        // Invalid URI\n        if (typeof uri !== 'string' || uri === '') return '';\n\n        // Host Relative URI\n        if (/^https?:\\/\\//i.test(dir) && /^\\//.test(uri)) {\n            dir = dir.replace(/(^https?:\\/\\/[^\\/]+).*/i, '$1');\n        }\n\n        // Absolute URI http://, https://, //\n        if (/^(https?:)?\\/\\//i.test(uri)) return uri;\n\n        // Data URI\n        if (/^data:.*,.*$/i.test(uri)) return uri;\n\n        // Blob URI\n        if (/^blob:.*$/i.test(uri)) return uri;\n\n        // Relative URI\n        return dir + uri;\n    }\n\n    static async loadBuffers(desc, dir) {\n        if (!desc.buffers) return null;\n        return await Promise.all(\n            desc.buffers.map((buffer) => {\n                // For GLB, binary buffer ready to go\n                if (buffer.binary) return buffer.binary;\n                const uri = this.resolveURI(buffer.uri, dir);\n                return fetch(uri).then((res) => res.arrayBuffer());\n            })\n        );\n    }\n\n    static parseBufferViews(gl, desc, buffers) {\n        if (!desc.bufferViews) return null;\n        // Clone to leave description pure\n        const bufferViews = desc.bufferViews.map((o) => Object.assign({}, o));\n\n        desc.meshes &&\n            desc.meshes.forEach(({ primitives }) => {\n                primitives.forEach(({ attributes, indices }) => {\n                    // Flag bufferView as an attribute, so it knows to create a gl buffer\n                    for (let attr in attributes) bufferViews[desc.accessors[attributes[attr]].bufferView].isAttribute = true;\n\n                    if (indices === undefined) return;\n                    bufferViews[desc.accessors[indices].bufferView].isAttribute = true;\n\n                    // Make sure indices bufferView have a target property for gl buffer binding\n                    bufferViews[desc.accessors[indices].bufferView].target = gl.ELEMENT_ARRAY_BUFFER;\n                });\n            });\n\n        // Get componentType of each bufferView from the accessors\n        desc.accessors.forEach(({ bufferView: i, componentType }) => {\n            bufferViews[i].componentType = componentType;\n        });\n\n        // Get mimetype of bufferView from images\n        desc.images &&\n            desc.images.forEach(({ uri, bufferView: i, mimeType }) => {\n                if (i === undefined) return;\n                bufferViews[i].mimeType = mimeType;\n            });\n\n        // Push each bufferView to the GPU as a separate buffer\n        bufferViews.forEach(\n            (\n                {\n                    buffer: bufferIndex, // required\n                    byteOffset = 0, // optional\n                    byteLength, // required\n                    byteStride, // optional\n                    target = gl.ARRAY_BUFFER, // optional, added above for elements\n                    name, // optional\n                    extensions, // optional\n                    extras, // optional\n\n                    componentType, // optional, added from accessor above\n                    mimeType, // optional, added from images above\n                    isAttribute,\n                },\n                i\n            ) => {\n                bufferViews[i].data = buffers[bufferIndex].slice(byteOffset, byteOffset + byteLength);\n\n                if (!isAttribute) return;\n                // Create gl buffers for the bufferView, pushing it to the GPU\n                const buffer = gl.createBuffer();\n                gl.bindBuffer(target, buffer);\n                gl.renderer.state.boundBuffer = buffer;\n                gl.bufferData(target, bufferViews[i].data, gl.STATIC_DRAW);\n                bufferViews[i].buffer = buffer;\n            }\n        );\n\n        return bufferViews;\n    }\n\n    static async parseImages(gl, desc, dir, bufferViews) {\n        if (!desc.images) return null;\n        return await Promise.all(\n            desc.images.map(async ({ uri, bufferView: bufferViewIndex, mimeType, name }) => {\n                if (mimeType === 'image/ktx2') {\n                    const { data } = bufferViews[bufferViewIndex];\n                    const image = await this.basisManager.parseTexture(data);\n                    return image;\n                }\n\n                // jpg / png\n                const image = new Image();\n                image.name = name;\n                if (uri) {\n                    image.src = this.resolveURI(uri, dir);\n                } else if (bufferViewIndex !== undefined) {\n                    const { data } = bufferViews[bufferViewIndex];\n                    const blob = new Blob([data], { type: mimeType });\n                    image.src = URL.createObjectURL(blob);\n                }\n                image.ready = new Promise((res) => {\n                    image.onload = () => res();\n                });\n                return image;\n            })\n        );\n    }\n\n    static parseTextures(gl, desc, images) {\n        if (!desc.textures) return null;\n        return desc.textures.map((textureInfo) => this.createTexture(gl, desc, images, textureInfo));\n    }\n\n    static createTexture(gl, desc, images, { sampler: samplerIndex, source: sourceIndex, name, extensions, extras }) {\n        if (sourceIndex === undefined && !!extensions) {\n            // Basis extension source index\n            if (extensions.KHR_texture_basisu) sourceIndex = extensions.KHR_texture_basisu.source;\n        }\n\n        const image = images[sourceIndex];\n        if (image.texture) return image.texture;\n\n        const options = {\n            flipY: false,\n            wrapS: gl.REPEAT, // Repeat by default, opposed to OGL's clamp by default\n            wrapT: gl.REPEAT,\n        };\n        const sampler = samplerIndex !== undefined ? desc.samplers[samplerIndex] : null;\n        if (sampler) {\n            ['magFilter', 'minFilter', 'wrapS', 'wrapT'].forEach((prop) => {\n                if (sampler[prop]) options[prop] = sampler[prop];\n            });\n        }\n\n        // For compressed textures\n        if (image.isBasis) {\n            options.image = image;\n            options.internalFormat = image.internalFormat;\n            if (image.isCompressedTexture) {\n                options.generateMipmaps = false;\n                if (image.length > 1) this.minFilter = gl.NEAREST_MIPMAP_LINEAR;\n            }\n            const texture = new Texture(gl, options);\n            texture.name = name;\n            image.texture = texture;\n            return texture;\n        }\n\n        const texture = new Texture(gl, options);\n        texture.name = name;\n        image.texture = texture;\n        image.ready.then(() => {\n            texture.image = image;\n        });\n\n        return texture;\n    }\n\n    static parseMaterials(gl, desc, textures) {\n        if (!desc.materials) return null;\n        return desc.materials.map(\n            ({\n                name,\n                extensions,\n                extras,\n                pbrMetallicRoughness = {},\n                normalTexture,\n                occlusionTexture,\n                emissiveTexture,\n                emissiveFactor = [0, 0, 0],\n                alphaMode = 'OPAQUE',\n                alphaCutoff = 0.5,\n                doubleSided = false,\n            }) => {\n                const {\n                    baseColorFactor = [1, 1, 1, 1],\n                    baseColorTexture,\n                    metallicFactor = 1,\n                    roughnessFactor = 1,\n                    metallicRoughnessTexture,\n                    //   extensions,\n                    //   extras,\n                } = pbrMetallicRoughness;\n\n                if (baseColorTexture) {\n                    baseColorTexture.texture = textures[baseColorTexture.index];\n                    // texCoord\n                }\n                if (normalTexture) {\n                    normalTexture.texture = textures[normalTexture.index];\n                    // scale: 1\n                    // texCoord\n                }\n                if (metallicRoughnessTexture) {\n                    metallicRoughnessTexture.texture = textures[metallicRoughnessTexture.index];\n                    // texCoord\n                }\n                if (occlusionTexture) {\n                    occlusionTexture.texture = textures[occlusionTexture.index];\n                    // strength 1\n                    // texCoord\n                }\n                if (emissiveTexture) {\n                    emissiveTexture.texture = textures[emissiveTexture.index];\n                    // texCoord\n                }\n\n                return {\n                    name,\n                    extensions,\n                    extras,\n                    baseColorFactor,\n                    baseColorTexture,\n                    metallicFactor,\n                    roughnessFactor,\n                    metallicRoughnessTexture,\n                    normalTexture,\n                    occlusionTexture,\n                    emissiveTexture,\n                    emissiveFactor,\n                    alphaMode,\n                    alphaCutoff,\n                    doubleSided,\n                };\n            }\n        );\n    }\n\n    static parseSkins(gl, desc, bufferViews) {\n        if (!desc.skins) return null;\n        return desc.skins.map(\n            ({\n                inverseBindMatrices, // optional\n                skeleton, // optional\n                joints, // required\n                // name,\n                // extensions,\n                // extras,\n            }) => {\n                return {\n                    inverseBindMatrices: this.parseAccessor(inverseBindMatrices, desc, bufferViews),\n                    skeleton,\n                    joints,\n                };\n            }\n        );\n    }\n\n    static parseMeshes(gl, desc, bufferViews, materials, skins) {\n        if (!desc.meshes) return null;\n        return desc.meshes.map(\n            (\n                {\n                    primitives, // required\n                    weights, // optional\n                    name, // optional\n                    extensions, // optional\n                    extras, // optional\n                },\n                meshIndex\n            ) => {\n                // TODO: weights stuff ?\n                // Parse through nodes to see how many instances there are\n                // and if there is a skin attached\n                // If multiple instances of a skin, need to create each\n                let numInstances = 0;\n                let skinIndices = [];\n                let isLightmap = false;\n                desc.nodes &&\n                    desc.nodes.forEach(({ mesh, skin, extras }) => {\n                        if (mesh === meshIndex) {\n                            numInstances++;\n                            if (skin !== undefined) skinIndices.push(skin);\n                            if (extras && extras.lightmap_scale_offset) isLightmap = true;\n                        }\n                    });\n                let isSkin = !!skinIndices.length;\n\n                // For skins, return array of skin meshes to account for multiple instances\n                if (isSkin) {\n                    primitives = skinIndices.map((skinIndex) => {\n                        return this.parsePrimitives(gl, primitives, desc, bufferViews, materials, 1, isLightmap).map(\n                            ({ geometry, program, mode }) => {\n                                const mesh = new GLTFSkin(gl, { skeleton: skins[skinIndex], geometry, program, mode });\n                                mesh.name = name;\n                                // TODO: support skin frustum culling\n                                mesh.frustumCulled = false;\n                                return mesh;\n                            }\n                        );\n                    });\n                    // For retrieval to add to node\n                    primitives.instanceCount = 0;\n                    primitives.numInstances = numInstances;\n                } else {\n                    primitives = this.parsePrimitives(gl, primitives, desc, bufferViews, materials, numInstances, isLightmap).map(\n                        ({ geometry, program, mode }) => {\n                            // InstancedMesh class has custom frustum culling for instances\n                            const meshConstructor = geometry.attributes.instanceMatrix ? InstancedMesh : Mesh;\n                            const mesh = new meshConstructor(gl, { geometry, program, mode });\n                            mesh.name = name;\n                            // Tag mesh so that nodes can add their transforms to the instance attribute\n                            mesh.numInstances = numInstances;\n                            return mesh;\n                        }\n                    );\n                }\n\n                return {\n                    primitives,\n                    weights,\n                    name,\n                };\n            }\n        );\n    }\n\n    static parsePrimitives(gl, primitives, desc, bufferViews, materials, numInstances, isLightmap) {\n        return primitives.map(\n            ({\n                attributes, // required\n                indices, // optional\n                material: materialIndex, // optional\n                mode = 4, // optional\n                targets, // optional\n                extensions, // optional\n                extras, // optional\n            }) => {\n                // TODO: materials\n                const program = new NormalProgram(gl);\n                if (materialIndex !== undefined) {\n                    program.gltfMaterial = materials[materialIndex];\n                }\n\n                const geometry = new Geometry(gl);\n\n                // Add each attribute found in primitive\n                for (let attr in attributes) {\n                    geometry.addAttribute(ATTRIBUTES[attr], this.parseAccessor(attributes[attr], desc, bufferViews));\n                }\n\n                // Add index attribute if found\n                if (indices !== undefined) {\n                    geometry.addAttribute('index', this.parseAccessor(indices, desc, bufferViews));\n                }\n\n                // Add instanced transform attribute if multiple instances\n                // Ignore if skin as we don't support instanced skins out of the box\n                if (numInstances > 1) {\n                    geometry.addAttribute('instanceMatrix', {\n                        instanced: 1,\n                        size: 16,\n                        data: new Float32Array(numInstances * 16),\n                    });\n                }\n\n                // Always supply lightmapScaleOffset as an instanced attribute\n                // Instanced skin lightmaps not supported\n                if (isLightmap) {\n                    geometry.addAttribute('lightmapScaleOffset', {\n                        instanced: 1,\n                        size: 4,\n                        data: new Float32Array(numInstances * 4),\n                    });\n                }\n\n                return {\n                    geometry,\n                    program,\n                    mode,\n                };\n            }\n        );\n    }\n\n    static parseAccessor(index, desc, bufferViews) {\n        // TODO: init missing bufferView with 0s\n        // TODO: support sparse\n\n        const {\n            bufferView: bufferViewIndex, // optional\n            byteOffset = 0, // optional\n            componentType, // required\n            normalized = false, // optional\n            count, // required\n            type, // required\n            min, // optional\n            max, // optional\n            sparse, // optional\n            // name, // optional\n            // extensions, // optional\n            // extras, // optional\n        } = desc.accessors[index];\n\n        const {\n            data, // attached in parseBufferViews\n            buffer, // replaced to be the actual GL buffer\n            byteOffset: bufferByteOffset = 0,\n            // byteLength, // applied in parseBufferViews\n            byteStride = 0,\n            target,\n            // name,\n            // extensions,\n            // extras,\n        } = bufferViews[bufferViewIndex];\n\n        const size = TYPE_SIZE[type];\n\n        // Parse data from joined buffers\n        const TypeArray = TYPE_ARRAY[componentType];\n        const elementBytes = TypeArray.BYTES_PER_ELEMENT;\n        const componentStride = byteStride / elementBytes;\n        const isInterleaved = !!byteStride && componentStride !== size;\n\n        let filteredData;\n\n        // Convert data to typed array for various uses (bounding boxes, raycasting, animation, merging etc)\n        if (isInterleaved) {\n            // First convert entire buffer to type\n            const typedData = new TypeArray(data, byteOffset);\n            // TODO: add length to not copy entire buffer if can help it\n            // const typedData = new TypeArray(data, byteOffset, (count - 1) * componentStride)\n\n            // Create output with length\n            filteredData = new TypeArray(count * size);\n\n            // Add element by element\n            for (let i = 0; i < count; i++) {\n                const start = componentStride * i;\n                const end = start + size;\n                filteredData.set(typedData.slice(start, end), i * size);\n            }\n        } else {\n            // Simply a slice\n            filteredData = new TypeArray(data, byteOffset, count * size);\n        }\n\n        // Return attribute data\n        return {\n            data: filteredData,\n            size,\n            type: componentType,\n            normalized,\n            buffer,\n            stride: byteStride,\n            offset: byteOffset,\n            count,\n            min,\n            max,\n        };\n    }\n\n    static parseNodes(gl, desc, meshes, skins, images) {\n        if (!desc.nodes) return null;\n        const nodes = desc.nodes.map(\n            ({\n                camera, // optional\n                children, // optional\n                skin: skinIndex, // optional\n                matrix, // optional\n                mesh: meshIndex, // optional\n                rotation, // optional\n                scale, // optional\n                translation, // optional\n                weights, // optional\n                name, // optional\n                extensions, // optional\n                extras, // optional\n            }) => {\n                const node = new Transform();\n                if (name) node.name = name;\n                node.extras = extras;\n                node.extensions = extensions;\n\n                // Need to attach to node as may have same material but different lightmap\n                if (extras && extras.lightmapTexture !== undefined) {\n                    extras.lightmapTexture.texture = this.createTexture(gl, desc, images, { source: extras.lightmapTexture.index });\n                }\n\n                // Apply transformations\n                if (matrix) {\n                    node.matrix.copy(matrix);\n                    node.decompose();\n                } else {\n                    if (rotation) node.quaternion.copy(rotation);\n                    if (scale) node.scale.copy(scale);\n                    if (translation) node.position.copy(translation);\n                    node.updateMatrix();\n                }\n\n                // Flags for avoiding duplicate transforms and removing unused instance nodes\n                let isInstanced = false;\n                let isFirstInstance = true;\n                let isInstancedMatrix = false;\n                let isSkin = skinIndex !== undefined;\n\n                // add mesh if included\n                if (meshIndex !== undefined) {\n                    if (isSkin) {\n                        meshes[meshIndex].primitives[meshes[meshIndex].primitives.instanceCount].forEach((mesh) => {\n                            mesh.extras = extras;\n                            mesh.setParent(node);\n                        });\n                        meshes[meshIndex].primitives.instanceCount++;\n                        // Remove properties once all instances added\n                        if (meshes[meshIndex].primitives.instanceCount === meshes[meshIndex].primitives.numInstances) {\n                            delete meshes[meshIndex].primitives.numInstances;\n                            delete meshes[meshIndex].primitives.instanceCount;\n                        }\n                    } else {\n                        meshes[meshIndex].primitives.forEach((mesh) => {\n                            mesh.extras = extras;\n\n                            // instanced mesh might only have 1\n                            if (mesh.geometry.isInstanced) {\n                                isInstanced = true;\n                                if (!mesh.instanceCount) {\n                                    mesh.instanceCount = 0;\n                                } else {\n                                    isFirstInstance = false;\n                                }\n                                if (mesh.geometry.attributes.instanceMatrix) {\n                                    isInstancedMatrix = true;\n                                    node.matrix.toArray(mesh.geometry.attributes.instanceMatrix.data, mesh.instanceCount * 16);\n                                }\n\n                                if (mesh.geometry.attributes.lightmapScaleOffset) {\n                                    mesh.geometry.attributes.lightmapScaleOffset.data.set(extras.lightmap_scale_offset, mesh.instanceCount * 4);\n                                }\n\n                                mesh.instanceCount++;\n\n                                if (mesh.instanceCount === mesh.numInstances) {\n                                    // Remove properties once all instances added\n                                    delete mesh.numInstances;\n                                    delete mesh.instanceCount;\n                                    // Flag attribute as dirty\n                                    if (mesh.geometry.attributes.instanceMatrix) {\n                                        mesh.geometry.attributes.instanceMatrix.needsUpdate = true;\n                                    }\n                                    if (mesh.geometry.attributes.lightmapScaleOffset) {\n                                        mesh.geometry.attributes.lightmapScaleOffset.needsUpdate = true;\n                                    }\n                                }\n                            }\n\n                            // For instances, only the first node will actually have the mesh\n                            if (isInstanced) {\n                                if (isFirstInstance) mesh.setParent(node);\n                            } else {\n                                mesh.setParent(node);\n                            }\n                        });\n                    }\n                }\n\n                // Reset node if instanced to not duplicate transforms\n                if (isInstancedMatrix) {\n                    // Remove unused nodes just providing an instance transform\n                    if (!isFirstInstance) return null;\n                    // Avoid duplicate transform for node containing the instanced mesh\n                    node.matrix.identity();\n                    node.decompose();\n                }\n\n                return node;\n            }\n        );\n\n        desc.nodes.forEach(({ children = [] }, i) => {\n            // Set hierarchy now all nodes created\n            children.forEach((childIndex) => {\n                if (!nodes[childIndex]) return;\n                nodes[childIndex].setParent(nodes[i]);\n            });\n        });\n\n        // Add frustum culling for instances now that instanceMatrix attribute is populated\n        meshes.forEach(({ primitives }, i) => {\n            primitives.forEach((primitive, i) => {\n                if (primitive.isInstancedMesh) primitive.addFrustumCull();\n            });\n        });\n\n        return nodes;\n    }\n\n    static populateSkins(skins, nodes) {\n        if (!skins) return;\n        skins.forEach((skin) => {\n            skin.joints = skin.joints.map((i, index) => {\n                const joint = nodes[i];\n                joint.skin = skin;\n                joint.bindInverse = new Mat4(...skin.inverseBindMatrices.data.slice(index * 16, (index + 1) * 16));\n                return joint;\n            });\n            if (skin.skeleton) skin.skeleton = nodes[skin.skeleton];\n        });\n    }\n\n    static parseAnimations(gl, desc, nodes, bufferViews) {\n        if (!desc.animations) return null;\n        return desc.animations.map(\n            (\n                {\n                    channels, // required\n                    samplers, // required\n                    name, // optional\n                    // extensions, // optional\n                    // extras,  // optional\n                },\n                animationIndex\n            ) => {\n                const data = channels.map(\n                    ({\n                        sampler: samplerIndex, // required\n                        target, // required\n                        // extensions, // optional\n                        // extras, // optional\n                    }) => {\n                        const {\n                            input: inputIndex, // required\n                            interpolation = 'LINEAR',\n                            output: outputIndex, // required\n                            // extensions, // optional\n                            // extras, // optional\n                        } = samplers[samplerIndex];\n\n                        const {\n                            node: nodeIndex, // optional - TODO: when is it not included?\n                            path, // required\n                            // extensions, // optional\n                            // extras, // optional\n                        } = target;\n\n                        const node = nodes[nodeIndex];\n                        const transform = TRANSFORMS[path];\n                        const times = this.parseAccessor(inputIndex, desc, bufferViews).data;\n                        const values = this.parseAccessor(outputIndex, desc, bufferViews).data;\n\n                        // Store reference on node for cyclical retrieval\n                        if (!node.animations) node.animations = [];\n                        if (!node.animations.includes(animationIndex)) node.animations.push(animationIndex);\n\n                        return {\n                            node,\n                            transform,\n                            interpolation,\n                            times,\n                            values,\n                        };\n                    }\n                );\n\n                return {\n                    name,\n                    animation: new GLTFAnimation(data),\n                };\n            }\n        );\n    }\n\n    static parseScenes(desc, nodes) {\n        if (!desc.scenes) return null;\n        return desc.scenes.map(\n            ({\n                nodes: nodesIndices = [],\n                name, // optional\n                extensions,\n                extras,\n            }) => {\n                const scene = nodesIndices.reduce((map, i) => {\n                    // Don't add null nodes (instanced transforms)\n                    if (nodes[i]) map.push(nodes[i]);\n                    return map;\n                }, []);\n                scene.extras = extras;\n                return scene;\n            }\n        );\n    }\n\n    static parseLights(gl, desc, nodes, scenes) {\n        const lights = {\n            directional: [],\n            point: [],\n            spot: [],\n        };\n\n        // Update matrices on root nodes\n        scenes.forEach((scene) => scene.forEach((node) => node.updateMatrixWorld()));\n\n        // uses KHR_lights_punctual extension\n        const lightsDescArray = desc.extensions?.KHR_lights_punctual?.lights || [];\n\n        // Need nodes for transforms\n        nodes.forEach((node) => {\n            if (!node?.extensions?.KHR_lights_punctual) return;\n            const lightIndex = node.extensions.KHR_lights_punctual.light;\n            const lightDesc = lightsDescArray[lightIndex];\n            const light = {\n                name: lightDesc.name || '',\n                color: { value: new Vec3().set(lightDesc.color || 1) },\n            };\n            // Apply intensity directly to color\n            if (lightDesc.intensity !== undefined) light.color.value.multiply(lightDesc.intensity);\n\n            switch (lightDesc.type) {\n                case 'directional':\n                    light.direction = { value: new Vec3(0, 0, 1).transformDirection(node.worldMatrix) };\n                    break;\n                case 'point':\n                    light.position = { value: new Vec3().applyMatrix4(node.worldMatrix) };\n                    light.distance = { value: lightDesc.range };\n                    light.decay = { value: 2 };\n                    break;\n                case 'spot':\n                    // TODO: support spot uniforms\n                    Object.assign(light, lightDesc);\n                    break;\n            }\n\n            lights[lightDesc.type].push(light);\n        });\n\n        return lights;\n    }\n}\n", "import { Camera } from \"ogl\";\n\nexport default class extends Camera {\n  constructor(gl, { fov = 25 }) {\n    super();\n\n    this.gl = gl;\n    this.fov = fov;\n  }\n\n  get fovInRad() {\n    return (this.fov * Math.PI) / 180;\n  }\n\n  getViewSize(ratio) {\n    const height = Math.abs(this.position.z * Math.tan(this.fovInRad / 2) * 2);\n    return { w: height * ratio, h: height };\n  }\n}\n", "import { Program } from \"ogl\";\nimport vertex from \"./vertex.vert\";\nimport fragment from \"./fragment.frag\";\n\nexport default class extends Program {\n  constructor(gl, options = {}) {\n    super(gl, {\n      vertex: vertex,\n      fragment: fragment,\n    });\n\n    // console.log(this.uniforms);\n    this.transparent = null;\n    this.cullFace = null;\n\n    this.uniforms = {\n      u_time: { value: 0 },\n      u_diff: { value: options.diff },\n    };\n  }\n\n  set time(t) {\n    this.uniforms.u_time.value = t;\n  }\n}\n", "import { Transform } from \"ogl\";\nimport Material from \"./mat/rock\";\n\nexport default class extends Transform {\n  constructor(gl, { mesh, texture }) {\n    super(gl);\n    this.gl = gl;\n\n    this.program = new Material(this.gl, {\n      diff: texture,\n    });\n\n    this.mesh = mesh;\n    this.mesh.children.forEach((item) => (item.program = this.program));\n    this.mesh.setParent(this);\n  }\n\n  resize() {}\n\n  render(t) {\n    this.program.time = t;\n    // this.position.x = Math.sin(t) * 0.2;\n  }\n}\n", "import { Program, Texture } from \"ogl\";\nimport vertex from \"./vertex.vert\";\nimport fragment from \"./fragment.frag\";\n\nexport default class extends Program {\n  constructor(gl, options = {}) {\n    super(gl, {\n      vertex: vertex,\n      fragment: fragment,\n    });\n\n    // console.log(this.uniforms);\n    this.transparent = null;\n    this.cullFace = null;\n\n    this.uniforms = {\n      u_time: { value: 0 },\n      u_diff: { value: options.diff || new Texture(this.gl) },\n    };\n  }\n\n  set time(t) {\n    this.uniforms.u_time.value = t;\n  }\n\n  set texture(t) {\n    this.uniforms.u_diff.value = t;\n  }\n}\n", "import { Texture } from \"ogl\";\nimport Material from \"./mat/screen\";\n\nexport default class Screen {\n  constructor(gl, { mesh }) {\n    this.gl = gl;\n\n    this.mesh = mesh;\n\n    this.program = new Material(this.gl);\n    this.mesh.program = this.program;\n\n    this.initSlider();\n  }\n\n  async initSlider() {\n    this.currentIndex = 0;\n    this.items = [...document.querySelectorAll(\"[data-video]\")];\n    this.videos = await this.loadVideos();\n\n    this.textures = this.videos.map(() => {\n      return new Texture(this.gl, {\n        generateMipmaps: false,\n      });\n    });\n\n    this.items.forEach((item, index) => {\n      item.onclick = () => (this.currentIndex = index);\n    });\n  }\n\n  async loadVideos() {\n    const loaded = await Promise.all(\n      this.items.map((item) => loadVideo(item.dataset.video))\n    );\n    return loaded;\n  }\n\n  render(t) {\n    if (this.textures) {\n      this.textures[this.currentIndex].image = this.videos[this.currentIndex];\n      this.textures[this.currentIndex].needsUpdate = true;\n      this.program.texture = this.textures[this.currentIndex];\n    }\n  }\n}\n\n// load utils\nasync function loadVideo(src) {\n  return new Promise((resolve) => {\n    const video = document.createElement(\"video\");\n    video.src = src;\n    video.loop = true;\n    video.muted = true;\n    video.autoplay = true;\n    video.playsInline = true;\n    video.crossOrigin = \"anonymous\";\n\n    video.play().then(() => {\n      resolve(video);\n    });\n  });\n}\n", "import { Program } from \"ogl\";\nimport vertex from \"./vertex.vert\";\nimport fragment from \"./fragment.frag\";\n\nexport default class extends Program {\n  constructor(gl, options = {}) {\n    super(gl, {\n      vertex: vertex,\n      fragment: fragment,\n    });\n\n    // console.log(this.uniforms);\n    this.transparent = null;\n    this.cullFace = null;\n\n    this.uniforms = {\n      u_time: { value: 0 },\n      u_diff: { value: options.diff },\n    };\n  }\n\n  set time(t) {\n    this.uniforms.u_time.value = t;\n  }\n}\n", "import { Transform } from \"ogl\";\nimport Screen from \"./screen.js\";\nimport Material from \"./mat/_model\";\n\nexport default class extends Transform {\n  constructor(gl, { mesh, texture }) {\n    super(gl);\n    this.gl = gl;\n\n    this.program = new Material(this.gl, {\n      diff: texture,\n    });\n\n    this.mesh = mesh;\n    this.mesh.setParent(this);\n\n    this.body = this.mesh.children[1].children[0];\n    this.body.program = this.program;\n\n    this.screen = new Screen(this.gl, {\n      mesh: this.mesh.children[0].children[0],\n    });\n\n    // console.log(this.mesh.children);\n    // this.mesh.position.x = 1;\n    // this.load();\n  }\n\n  resize() {}\n\n  render(t) {\n    this.program.time = t;\n    // this.position.x = Math.sin(t) * 0.2;\n    this.screen?.render(t);\n  }\n}\n", "import { Transform } from \"ogl\";\n\nimport Model from \"./rock.js\";\nimport Ipad from \"./ipad.js\";\n\nexport default class extends Transform {\n  constructor(gl, data = {}) {\n    super();\n    this.gl = gl;\n    this.isOn = true;\n\n    const scale = 0.3;\n    this.scale.set(scale, scale, scale);\n\n    this.rotation.y = 0.3;\n    this.position.y = 0.1;\n  }\n\n  create() {\n    this.rock = new Model(this.gl, {\n      mesh: window.assets.model.scene[0],\n      texture: window.assets.rockTexture,\n    });\n\n    this.ipad = new Ipad(this.gl, {\n      mesh: window.assets.model.scene[1],\n      texture: window.assets.ipadTexture,\n    });\n\n    this.rock.setParent(this);\n    this.ipad.setParent(this);\n  }\n\n  render(t) {\n    if (!this.isOn) return;\n    this.ipad?.render();\n\n    // if (this.quad) this.quad.render(t);\n    // if (this.quads) this.quads.forEach((item) => item.render(t));\n  }\n\n  resize(vp) {\n    this.vp = vp;\n    // if (this.quad) this.quad.resize(vp);\n  }\n}\n", "// import model from \"./asset-3d-display.glb\";\nimport ipadTexture from \"./ipad_bake.png\";\nimport rockTexture from \"./rock_bake.png\";\n\nexport const ASSETS = {\n  model:\n    \"https://tmpr.s3.eu-central-1.amazonaws.com/assets/mod/asset-3d-display.glb\",\n  rockTexture,\n  ipadTexture,\n};\n", "import { Texture } from \"ogl\";\n\nexport async function loadTexture(gl, path) {\n  return new Promise((resolve) => {\n    const img = new Image();\n    img.src = path;\n    img.onload = () => {\n      const texture = new Texture(gl, { image: img });\n      resolve(texture);\n    };\n  });\n}\n", "import { GLTFLoader } from \"ogl\";\n\nexport async function loadModel(gl, path) {\n  return GLTFLoader.load(gl, path);\n}\n\nexport async function loadGeometry(gl, path) {\n  return new Promise((resolve) => {\n    GLTFLoader.load(gl, path).then((data) => {\n      resolve(data.meshes[0].primitives[0].geometry);\n    });\n  });\n}\n", "import { ASSETS } from \"../asset/\";\nimport { loadTexture } from \"./texture-loader\";\nimport { loadModel } from \"./model-loader\";\n\nexport default class {\n  constructor(gl) {\n    this.gl = gl;\n  }\n\n  async load() {\n    console.time(\"load::\");\n\n    const [model, rockTexture, ipadTexture] = await Promise.all([\n      loadModel(this.gl, ASSETS.model),\n      loadTexture(this.gl, ASSETS.rockTexture),\n      loadTexture(this.gl, ASSETS.ipadTexture),\n    ]);\n\n    rockTexture.flipY = false;\n    ipadTexture.flipY = false;\n\n    console.timeEnd(\"load::\");\n\n    return {\n      model,\n      rockTexture,\n      ipadTexture,\n    };\n  }\n}\n", "import { Renderer, Orbit } from \"ogl\";\nimport Cam from \"./_camera.js\";\nimport Scene from \"./_scene.js\";\nimport Loader from \"./util/loader\";\n\nexport default class {\n  constructor() {\n    this.wrapper = document.querySelector('[data-gl=\"cnv\"]');\n    this.vp = {\n      dpr: Math.min(window.devicePixelRatio, 2),\n    };\n\n    this.renderer = new Renderer({ dpr: 2 });\n    this.gl = this.renderer.gl;\n    this.gl.clearColor(0, 0, 0, 1);\n\n    this.wrapper.appendChild(this.gl.canvas);\n\n    this.camera = new Cam(this.gl, {});\n    this.camera.position.set(0, 0, 5);\n\n    this.camera.lookAt([0, 0, 0]);\n    this.controls = new Orbit(this.camera);\n\n    this.scene = new Scene(this.gl);\n    this.time = 0;\n\n    this.resize();\n    this.initEvents();\n\n    this.render();\n\n    this.load();\n  }\n\n  async load() {\n    this.loader = new Loader(this.gl);\n    window.assets = await this.loader.load();\n\n    this.scene.create();\n\n    // console.log(window.assets);\n  }\n\n  render(scroll = 0) {\n    this.time += 0.5;\n\n    if (this.controls) this.controls.update();\n    if (this.scene) this.scene.render(this.time);\n\n    window.requestAnimationFrame(this.render.bind(this));\n\n    this.renderer.render({\n      scene: this.scene,\n      camera: this.camera,\n    });\n  }\n\n  initEvents() {\n    // resize\n    new ResizeObserver((entry) => this.resize(entry[0].contentRect)).observe(\n      this.wrapper\n    );\n    // mouse\n    this.mouse = { x: 0, y: 0 };\n  }\n\n  resize(entry) {\n    const cw = entry ? entry.width : this.wrapper.clientWidth;\n    const ch = entry ? entry.height : this.wrapper.clientHeight;\n\n    this.vp.w = cw;\n    this.vp.h = ch;\n    this.vp.ratio = cw / ch;\n    this.vp.viewSize = this.camera.getViewSize(this.vp.ratio);\n    this.vp.viewRatio = this.vp.viewSize.w / this.vp.w;\n    // this.vp.scrollx = window.scrollX;\n    // this.vp.scrolly = window.scrollY;\n\n    this.renderer.setSize(this.vp.w, this.vp.h);\n    this.camera.perspective({\n      aspect: this.vp.ratio,\n    });\n\n    this.scene.resize(this.vp);\n    // this.resizeChild();\n  }\n}\n", "import Gl from \"./gl/gl.js\";\n\nclass App {\n  constructor() {\n    this.init();\n\n    console.log(\"hello app\");\n  }\n\n  init() {\n    this.gl = new Gl();\n  }\n}\n\nwindow.app = new App();\n"],
  "mappings": "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",
  "names": ["location", "scale", "ID", "vertex", "fragment", "location", "length", "tempVec3", "ID", "copy", "set", "scale", "normalize", "dot", "multiply", "dot", "copy", "set", "dot", "normalize", "set", "copy", "normalize", "multiply", "dot", "copy", "set", "identity", "invert", "multiply", "scale", "add", "subtract", "set", "scale", "add", "subtract", "multiply", "identity", "copy", "invert", "invert", "distance", "fromQuat", "copy", "set", "identity", "invert", "multiply", "translate", "rotate", "scale", "set", "translate", "rotate", "scale", "multiply", "identity", "copy", "fromQuat", "invert", "ID", "ID", "copy", "set", "add", "subtract", "multiply", "divide", "scale", "distance", "squaredDistance", "length", "squaredLength", "negate", "inverse", "normalize", "dot", "cross", "lerp", "transformMat3", "transformMat4", "exactEquals", "set", "copy", "add", "subtract", "multiply", "scale", "divide", "inverse", "length", "distance", "squaredDistance", "squaredLength", "negate", "cross", "normalize", "dot", "exactEquals", "transformMat3", "transformMat4", "lerp", "set", "copy", "normalize", "scale", "dot", "tempVec3", "distance", "angle", "size", "tempMat4", "identity", "image", "texture", "extras", "scale", "i", "rock_default", "vertex_default", "fragment_default", "vertex_default", "fragment_default", "scale", "rock_default"]
}
